{"version":3,"sources":["types/theme.ts","style/theme.ts","style/globalStyle.ts","database/index.ts","store/theme.ts","types/player.ts","assets/logo.svg","components/Home/Logo.tsx","components/Global/Modal.tsx","components/Global/Button.tsx","components/Global/Input.tsx","util/hook/useGameRoomName.ts","util/generateUniqueId.ts","store/players.ts","types/card.ts","store/user.ts","components/Home/RoomDialog.tsx","components/Global/ThemeToggler.tsx","util/hook/useUserName.ts","store/modal.ts","store/deck.ts","store/bind.ts","components/WaitRoom/PlayerWindow.tsx","store/score.ts","store/game.ts","store/winTricks.ts","util/hook/useInitData.ts","views/Home/index.tsx","components/Global/Radio.tsx","components/WaitRoom/TeamRadios.tsx","util/generateArray.ts","components/Global/Loading.tsx","views/WaitRoom/index.tsx","util/deck.ts","util/suit.ts","components/GameRoom/ThinkingIcon.tsx","components/GameRoom/Modal/ModalBinding/PlayerList.tsx","util/isObjectEquivalent.ts","components/GameRoom/Modal/ModalBinding/OptionButton.tsx","components/GameRoom/Modal/ModalBinding/OptionList.tsx","components/GameRoom/Modal/ModalBinding/BindList.tsx","components/GameRoom/Modal/ModalBinding/index.tsx","assets/kanaheiclap.gif","components/GameRoom/Modal/ModalGiveUp/index.tsx","assets/bumpintowindow.gif","components/GameRoom/Modal/ModalConfirmLeave/index.tsx","util/sleep.ts","components/GameRoom/Modal/ModalResult/index.tsx","components/GameRoom/Modal/ModalRoot/index.tsx","components/GameRoom/Card/index.tsx","types/navigator.ts","components/GameRoom/Cards/UserHandCards.tsx","components/GameRoom/Cards/OtherUserHandCards.tsx","components/GameRoom/Cards/index.tsx","components/GameRoom/CardTable/Nameplate.tsx","components/GameRoom/CardTable/PlayedCard.tsx","util/game.ts","components/GameRoom/CardTable/index.tsx","components/GameRoom/MainInfo/InfoBox.tsx","components/GameRoom/MainInfo/index.tsx","components/GameRoom/SideInfo.tsx","components/GameRoom/Settings/Content.tsx","components/GameRoom/Settings/index.tsx","components/GameRoom/WonTricks/Icon.tsx","components/GameRoom/WonTricks/Content.tsx","components/GameRoom/WonTricks/index.tsx","components/GameRoom/Navbar/index.tsx","views/GameRoom/index.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["ThemeTypes","color","GlobalStyle","createGlobalStyle","db","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","TeamTypes","themeState","atom","key","default","existingChosenTheme","JSON","parse","localStorage","getItem","Light","defaultTheme","themeData","light","bg","fg","dark","StyledLogo","styled","div","theme","Logo","props","className","useRecoilState","src","LogoSVG","alt","backgroundColor","StyledModalPage","animated","ModalPage","active","children","onDeactive","useRecoilValue","transitions","useTransition","from","opacity","transform","enter","leave","item","style","onClick","StyledButton","button","getButtonStyle","themeType","Button","type","styledInput","value","placeholder","onChange","onFocus","maxLength","useGameRoomName","useState","gameRoomName","setRoomName","warnMessage","setWarnMessage","validateRoomName","test","generateUniqueId","Math","random","toString","substring","CardSuitType","SuitColorType","playersData","teamArray","selector","get","map","data","team","OrderedStartFromTeamOne","playerDataState","filter","player","TeamOne","TeamTwo","playerData","handleIndex","index","relationWithUser","user","userNameState","userIndex","indexOf","nextIndex","teammateIndex","previousIndex","teammate","nextPlayer","previousPlayer","userIDState","userRoomState","userIndexState","userName","findIndex","userTeamState","playerList","length","find","userReadyState","ready","navState","boxBorder","cancel_bg","cancel_fg","title_bg","title_fg","sub_title_fg","sub_title_bb","Content","box_border","CreateButton","isLengthValid","getButtonColor","e","RoomButton","roomName","RoomDialog","closeRoomList","roomList","history","useHistory","userGameRoomName","setLocalRoom","useSetRecoilState","setUserID","updateDbRoomData","roomID","a","roomRef","database","ref","userID","current","Date","timestamp","child","update","toPath","push","Modal","stopPropagation","room","target","preventDefault","createRoom","Toggler","ThemeToggler","toggleTheme","setTheme","setItem","stringify","Dark","classnames","useUserName","setUserName","validateUserName","isVaild","modalState","userDeckState","otherPlayerDeckState","badDeck","userDeck","card","number","reduce","b","responseToBadDeck","OKtoPlay","PlayerOrders","userPickBindState","nowBindState","suit","Club","userPassState","playersCalledListState","availibleTricksState","min","Spade","trick","teamShouldWinState","calledPlayer","team1","team2","calledTeam","p","anotherTeam","calledTeamShouldWin","anotherTeamShouldWin","teamScoresState","currentPlayerName","thisRoundSuitState","thisRoundCardsState","trumpState","isUserTurnState","nowPlayer","isUserLastPlayerState","isThisRoundEndState","isGameEndState","team1ShouldWin","team2ShouldWin","team1Score","team2Score","userWinTricksState","useInitData","initUserName","useResetRecoilState","initUserRoom","initUserID","initModalType","initUserDeck","initScore","initUserPickBind","initNowBind","initPassState","initRoundCards","initTrump","initCalledList","initWinTricks","initPlayerData","initGameRoomData","initGameData","name_fg","border","button_color","NameForm","form","NameFillIn","openRoomList","id","HomePage","Home","showRoomDialog","toggleRoomDialog","setRoomList","React","useEffect","subscribeRooms","removeListeners","Firebase","on","roomsData","val","filterOutAbandonedRoom","Object","entries","playersInfo","obj","set","rooms","values","sort","off","w_border","st_bg","st_border","cl_bg","cl_border","name_bg","name_st_fg","name_cl_fg","ready_fg","ready_bg","ready_border","Window","PlayerBox","order","playerName","defaultTeam","First","Fourth","playerTeam","PlayerWindow","playersOrder","Second","Third","StyledRadio","span","size","marginRight","Radio","default_f","st_fg","cl_fg","RadioArea","TeamOption","isChosen","teamIndex","getBorder","TeamRadios","userTeam","handleChooseTeam","generateArray","Array","_","x","dot","LoadingModal","Loading","text","actionText","countdown","noOpacity","action","cancelReady","timeLeft","setTimeLeft","dots","countdownInterval","setInterval","clearInterval","includes","Room","ReadyButton","buttonMessage","WaitRoom","setButtonMessage","setPlayerData","isUserReady","isAllReady","initWaitRoomData","detectUserDisConnect","once","userOrder","userDefaultTeam","sortedByTimestamp","enterGame","remove","prepareWaitRoom","onDisconnect","cancel","teamOneAmount","teamTwoAmount","setReady","isReady","userInfo","dealCards","playerAmount","deck","players","i","cards","Heart","Diamond","cardAPoint","sortCards","shuffledDeck","floor","shuffle","j","buildNewDeck","suitColor","Black","Red","suitInPoker","Icon","ThinkingIcon","t1_name_fg","t2_name_fg","t1_name_bg","t2_name_bg","binds_bg","red_suit_color","black_suit_color","pass_color","Player","teamColor","getUserTurnEffect","PlayInfo","name","calledList","isPlayerTurn","is_player_turn","called","isPassed","bind","PlayerList","setCalledList","calledBindsRef","allCalledBinds","isObjectEquivalent","aKeys","keys","bKeys","every","unable_color","OptionButton","isUnableBind","trickNumber","isPicked","number_c","OptionRow","Options","isUserTurn","suits","pickBindState","setPickBindState","nowBind","bindData","List","OptionList","tricks","Box","status_unable_bg","status_unable_fg","call_unable_bg","call_unable_fg","status_active_bg","status_active_fg","call_pass_bg","call_pass_fg","call_active_bg","call_active_fg","Hint","hint","BindList","userPickBind","setUserPickBind","isUserPass","setUserPass","setNowBind","trump","setTrump","availibleTricks","nowBindRef","nowBindData","detectTrumpDecided","useMemo","noBind","callBind","bindRef","userBindListRef","nextPlayerRef","userCalledBinds","calledBind","newUserBinds","bindListRef","binds","playerCalledList","some","getNextPlayer","playerIndex","content_bg","BindingBox","ModalBinding","yes_button_fg","yes_button_bg","no_button_fg","no_button_bg","AskBox","setResponseToBadDeck","Kanahei","ModalGiveUp","closeModal","leaveGame","ModalConfirmLeave","sleep","ms","Promise","resolve","setTimeout","AninimationBox","Animations","delay","toggleDelay","setDelay","mainFireWorkData","loop","autoplay","animationData","mainFireWork","rendererSettings","preserveAspectRatio","subFireWorkData","subFireWork","thirdFireWorkData","thirdFireWork","options","height","width","win_fg","ResultBox","winTeam","isUserWin","toggleLoadingWindow","openConfirmLeaveModal","refreshGame","teamName","buttonColor","yellow_button","orange_button","green_button","listenOnOneMoreGame","removeOneMoreGameListener","readyToNextRound","ModalResult","Root","ModalRoot","isLoading","toggleLoading","isOKtoPlay","isGotWinner","modalType","setModalType","backToWaitRoom","NavigatorTypes","front_bg","back_bg","suit_red","suit_black","pattern","shadow","PokerCard","Card","hasDetail","nowPickSuit","numberOnCard","numberInPoker","suitOnCard","sameSuit","isNotPicked","UserHandCards","thisRoundSuit","isUserLastPlayer","setUserDeck","setNowPickSuit","gameInfoRef","handlePickCard","isValidCard","playCard","removeCardFromDeck","switchToNextPlayer","pickedSuit","cardsRef","suitRef","userPlayData","d","newDeck","OtherUserHandCards","cardAmount","cardArray","CardGroup","Cards","otherPlayerDeck","orderedPlayers","fc","bw","highlight_color_team","Tag","PlayerNameTag","isCurrentPlayer","Names","Nameplate","currentPlayer","PlayedCard","currentSuit","thisRoundCards","updateThisRoundCards","teamScores","updateTeamScores","isThisRoundEnd","setOtherPlayerDeck","setUserWinTricks","orderCards","playedPlayer","pre","handleRoundEnded","currentPlayerRef","winner","getRoundWinner","updatePoints","collectThisTrick","initRoundData","thisRoundSuitRef","thisRoundCardsRef","winnerIndex","point","countPoint","max","getBiggestCard","winnerTeam","Table","border_color","CardTable","InfoBox","title","Board","Point","team1color","team2color","Suit","red","black","PointInfo","teamShouldWin","MainInfo","SideNav","SideInfo","renderIcon","content","nowNav","setNowNav","Item","b_bottom","SettingButton","exit_button","mail_button","line","button_bg","PlusIcon","isOpen","Settings","StyledCardIcon","CardIcon","Empty","userWinTricks","WonTricks","Background","nav","Navbar","GameRoom","setNowPlayerState","setThisRoundSuit","listenOnCurrentPlayer","listenOnThisRoundSuit","listenOnChangeRouteEvent","dealDeck","nowPlayerID","roundSuit","changeMateRef","leaveRef","restartRef","disconnectedRef","someoneLeaveGame","deckInfo","roundSuitRef","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.246049c0.chunk.js","sourcesContent":["\nexport enum ThemeTypes {\n\tLight = 'light',\n\tDark = 'dark',\n}\n\nexport interface ThemeDataDetail {\n    [key: string]: string;\n}\n\nexport interface ThemeData {\n    [ThemeTypes.Light]: ThemeDataDetail;\n    [ThemeTypes.Dark]: ThemeDataDetail;\n}\n\nexport type Theme = ThemeTypes.Light | ThemeTypes.Dark;","export const color = {\n    $theme_background: '#F6F3EB',\n    $title_font_color: '#965735',\n    $brown_color: '#8c6954',\n    $pink_color: '#f29c9b',\n    $green_color: '#a3c07e',\n    $warn_red_color: '#BF3131',\n    $red_suit_color: '#AF3C3C',\n    $black_suit_color: '#323232',\n    $shadow: 'rgba(124, 124, 124, 0.4)',\n    $highlight_color: '#f5db8f',\n    $pass_color: '#a5dc6e',\n    $unable_color: '#dcdcdc',\n    $unable_font_color: '#C4C4C4',\n    $orange_color: '#f5ab57',\n    $under_line_color: '#E3E1E1',\n    $default_font_color: '#323232',\n    $fluorescent_pink_color: '#FFC2C0',\n    $fluorescent_yellow_color: '#FEEE95',\n    $fluorescent_green_color: '#0FFF50',\n    $fluorescent_orange_color: '#FF5F1F',\n\n    $dark_border_color: '#E5D3D2',\n    $dark_default_font_color: '#F3F3F3',\n    $dark_dim_border_color: '#767675',\n    $dark_black_suit_color: '#E5D3D2',\n    $dark_red_suit_color: '#F7274F',\n    $dark_bg_color: '#2B2C2A',\n    $dark_dim_bg_color: '#333332',\n    $light_pink_color: '#FFE9E8',\n    $dark_unable_color: '#484545'\n}","import { createGlobalStyle } from \"styled-components\";\nimport { color } from \"style/theme\";\n\nexport const GlobalStyle = createGlobalStyle`\n    * {\n    font-family: 'Kosugi Maru', sans-serif;\n    user-select: none;\n    }\n    \n    body,\n    html {\n    font-weight: 400;\n    background-color: ${color.$theme_background};\n    box-sizing: border-box;\n    overflow: hidden;\n    overflow-x: hidden;\n    height: 100%;\n    width: 100%;\n    transform: translate3d(0, 0, 0);\n    padding: 0;\n    margin: auto;\n    color: ${color.$default_font_color};\n    }\n\n    #root {\n    height: 100%;\n    overflow: hidden;\n\n        & > div {\n            padding: 5vw;\n            height: 100%;\n            box-sizing: border-box;\n        }\n    }\n\n    button {\n        border: none;\n        \n        &:active,\n        &:focus {\n            outline: none;\n        }\n    }\n\n    p {\n        margin: 0;\n    }\n`;","import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_APIKEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n};\n\nconst db = firebase.initializeApp(firebaseConfig);\nexport default db;","import {\n    atom\n} from 'recoil';\nimport { Theme, ThemeTypes } from 'types/theme';\n\nconst defaultTheme = () => {\n    const existingChosenTheme = JSON.parse(localStorage.getItem('cake-and-bridge-theme') || '{}');\n    if(typeof existingChosenTheme !== 'string') {\n        return ThemeTypes.Light;\n    }   \n    return existingChosenTheme;\n}\n\nexport const themeState = atom({\n    key: 'themeState',\n    default: defaultTheme() as Theme,\n});","export enum TeamTypes {\n\tTeamOne = 'team1',\n\tTeamTwo = 'team2',\n}\n\nexport type Team = TeamTypes.TeamOne | TeamTypes.TeamTwo;\n\nexport interface PlayerData {\n    player: string;\n    team: TeamTypes;\n    timestamp: number;\n    userID: string;\n    ready?: boolean;\n}","export default __webpack_public_path__ + \"static/media/logo.ba38e50a.svg\";","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState } from \"recoil\";\nimport { themeState } from 'store/theme';\nimport { color } from \"style/theme\";\nimport LogoSVG from 'assets/logo.svg';\n\nconst themeData = {\n    light: { \n\t\tbg: 'white',\n        fg: color.$title_font_color,\n\t},\n    dark: { \n\t\tbg: color.$dark_dim_bg_color,\n        fg: color.$fluorescent_pink_color,\n\t},\n}\n\nconst StyledLogo = styled.div`\n    margin: 30px auto 0;\n    border-radius: 100%;\n    text-align: center;\n    width: 270px;\n    height: 270px;\n    padding: 30px;\n    box-sizing: border-box;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    transition: .3s all;\n    background-color: ${({theme}) => theme.bg };\n\n    .image {\n        width: 60%;\n        margin-bottom: 20px;\n    }\n\n    .name {\n        font-size: 18px;\n        letter-spacing: 2px;\n        line-height: 28px;\n        color:  ${({theme}) => theme.fg };\n    }\n`\n\ninterface LogoProperty {\n    className: string;\n}\n\nconst Logo = (props: LogoProperty) => {\n    const { className } = props;\n    const [theme] = useRecoilState(themeState);\n    return (\n        <StyledLogo \n            theme={themeData[theme]}\n            className={className}>\n                <img className=\"image\" src={LogoSVG} alt=\"logo\" />\n                <p className=\"name\">\n                    Cake-Bridge\n                    <br/>\n                    for-Life\n                </p>\n        </StyledLogo>\n    );\n}\n\nexport default Logo;","import React from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useRecoilValue } from 'recoil';\nimport { color } from 'style/theme';\nimport { themeState } from 'store/theme';\nimport styled from 'styled-components';\n\nconst themeData = {\n    light: { backgroundColor: '#f3e9e9' },\n    dark: { backgroundColor: color.$dark_bg_color },\n}\n\nconst StyledModalPage = styled(animated.div)`\n    background-color: rgba(0, 0, 0, 0.25);\n\twidth: 100%;\n\theight: 100%;\n    top: 0;\n    left: 0;\n\tposition: absolute;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n    z-index: 20;\n\n    &.no-opacity {\n        background-color: ${({ theme }) => theme.backgroundColor};\n    }\n\n\n    &.result_modal {\n        background-color: rgba(0, 0, 0, 0.5);\n    }\n\n    & > div {\n        min-width: 65vw;\n    }\n`\ninterface ModalPageProperty {\n    className?: string;\n    active: Boolean;\n    children: React.ReactNode;\n    onDeactive?: (e: React.MouseEvent<HTMLElement>) => void,\n}\n\nconst ModalPage = (props: ModalPageProperty) => {\n    const { active, children, className, onDeactive } = props;\n    const theme = useRecoilValue(themeState);\n\n    const transitions = useTransition(active, {\n        from: { opacity: 0, transform: \"translateY(-15px)\" },\n        enter: { opacity: 1, transform: \"translateY(0px)\" },\n        leave: { opacity: 0, transform: \"translateY(-15px)\" }\n    });\n\n    return (\n        <>\n            {transitions((props, item) => item && (\n                <StyledModalPage\n                    style={props}\n                    onClick={onDeactive}\n                    theme={themeData[theme]}\n                    className={className}\n                >\n                    {children}\n                </StyledModalPage>))\n            }\n        </>\n    )\n}\n\nexport default ModalPage","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { Theme } from 'types/theme';\nimport { themeState  } from 'store/theme';\n\nconst getButtonStyle = (theme: string, color: string) => {\n    switch(theme){\n        case 'light':\n        default:\n            return `\n                background-color: ${color};\n                color: white;\n            `\n        case 'dark':\n            return `\n                background-color: transparent;\n                color: ${color};\n                border: 1px solid ${color};\n            `\n    }\n}\n\ninterface ButtonProperty {\n    className?: string;\n    onClick: (e: React.MouseEvent<HTMLElement>) => void;\n    children: React.ReactNode;\n    color: string;\n    type?: 'submit' | 'button';\n}\n\ninterface StyledButtonProperty extends ButtonProperty {\n    themeType: Theme; \n}\n\nconst StyledButton = styled.button<StyledButtonProperty>`\n    cursor: pointer;\n    border-radius: 50px;\n    padding: 10px 20px;\n    letter-spacing: 1px;\n    text-align: center;\n    transition: 0.3s all;\n    ${({themeType, color}) => getButtonStyle(themeType, color)}\n\n    &.enter_button {\n        min-width: 50%;\n        font-size: 18px;\n        letter-spacing: 3px;\n    }\n`\n\nconst Button = (props: ButtonProperty ) => {\n    const [theme] = useRecoilState(themeState);\n    const { \n        className, \n        children, \n        onClick = () => {},\n        color,\n        type = 'button',\n    } = props\n\n    return (\n    <StyledButton\n        type={type}\n        themeType={theme}\n        color={color}\n        className={className}\n        onClick={onClick}\n    >\n        {children}\n    </StyledButton>\n    )\n}\n\nexport default Button;","import React from 'react';\nimport styled from 'styled-components';\nimport { color } from \"style/theme\";\n\ninterface InputProperty  {\n    className: string;\n    value: string;\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n    maxLength: number;\n    onFocus?: () => void;\n    placeholder?: string;\n}\nconst Input = (props: InputProperty) => {\n    const {\n        className,\n        value,\n        placeholder,\n        onChange = () => {},\n        onFocus = () => {},\n        maxLength = 10\n    } = props;\n\n    return (\n        <input\n            className={className}\n            maxLength={maxLength}\n            placeholder={placeholder}\n            onChange={onChange}\n            onFocus={onFocus}\n            value={value}\n            type=\"text\" />\n    )\n}\n\nconst styledInput = styled(Input)`\n    user-select: auto;\n    width: 50%;\n    display: block;\n    text-align: center;\n    color: ${color.$title_font_color};\n    background-color: transparent;\n    border: none;\n    border-radius: 0;\n\n    &:active,\n    &:focus {\n        outline: none;\n    }\n`\n\nexport default styledInput;","import { useState } from 'react';\n\ntype Values = {\n    gameRoomName: string;\n    warnMessage: string;\n}\n\ntype Handlers = {\n    setRoomName: React.Dispatch<React.SetStateAction<string>>;\n    setWarnMessage: React.Dispatch<React.SetStateAction<string>>\n    validateRoomName: () => boolean;\n}\n\nconst useGameRoomName = (): [Values, Handlers] => {\n    const [gameRoomName, setRoomName] = useState('');\n    const [warnMessage, setWarnMessage] = useState('');\n\n    const validateRoomName = () => {\n        const regex = /^[^.]*$/g;\n        const isVaild = regex.test(gameRoomName);\n\n\t\tif (!isVaild) {\n\t\t\tsetWarnMessage('請勿輸入 . 作為房間名');\n\t\t\treturn false;\n\t\t}\n\n\t\tsetWarnMessage('');\n\t\treturn true;\n\t};\n\n    return [\n        { gameRoomName, warnMessage },\n        { setRoomName, setWarnMessage, validateRoomName }\n    ]\n}\n\nexport default useGameRoomName;\n","const generateUniqueId = () => Math.random().toString(36).substring(5,11);\n\nexport default generateUniqueId;","import {\n    atom, selector,\n} from 'recoil';\nimport { PlayerData, TeamTypes } from 'types/player';\n\nimport { userNameState } from './user';\n\nexport const playersData = atom({\n    key: 'playersData',\n    default: [] as PlayerData[],\n})\n\nexport const teamArray = selector({\n    key: 'teamState',\n    get: ({get}) => {\n        const team = get(playersData);\n        return team.map(data=>data.team);\n    }\n})\n\nexport const OrderedStartFromTeamOne = selector({\n    key: 'OrderedStartFromTeamOne',\n    get: ({get}) => {\n        const playerDataState = get(playersData);\n        const firstPlayer = playerDataState.filter(player=>player.team === TeamTypes.TeamOne)[0];\n        const secondPlayer = playerDataState.filter(player=>player.team === TeamTypes.TeamTwo)[0];\n        const thirdPlayer = playerDataState.filter(player=>player.team === TeamTypes.TeamOne)[1];\n        const lastPlayer = playerDataState.filter(player=>player.team === TeamTypes.TeamTwo)[1];\n        const result = [firstPlayer,secondPlayer,thirdPlayer,lastPlayer]\n            .map(playerData=>playerData.player);\n        return result\n    }\n})\n\nconst handleIndex = (index: number) => {\n    if(index > 3) {\n        return index - 4\n    } else {\n        return index\n    }\n}\n\nexport const relationWithUser = selector({\n    key: 'relationWithUser',\n    get: ({get}) => {\n        const playerDataState = get(OrderedStartFromTeamOne);\n        const user = get(userNameState);\n        const userIndex = playerDataState.indexOf(user);\n        const nextIndex = handleIndex(userIndex + 1);\n        const teammateIndex = handleIndex(userIndex + 2);\n        const previousIndex = handleIndex(userIndex + 3);\n        return {\n            user,\n            teammate: playerDataState[teammateIndex],\n            nextPlayer: playerDataState[nextIndex],\n            previousPlayer: playerDataState[previousIndex],\n        }\n    }\n})","export enum CardSuitType {\n\tSpade = 'spade',\n\tHeart = 'heart',\n\tDiamond = 'diamond',\n\tClub = 'club',\n}\n\nexport enum SuitColorType {\n\tRed = 'red',\n\tBlack = 'black',\n}\n\nexport type SuitColor =  SuitColorType.Black | SuitColorType.Red;\n\nexport type Suits = CardSuitType.Spade | CardSuitType.Heart | CardSuitType.Diamond | CardSuitType.Club;\n\nexport type OtherPlayerDeck = {\n\t[key: string]: number;\n}\n\nexport interface Card {\n\tsuit: CardSuitType;\n\tnumber: number;\n}","import {\n    atom, selector,\n} from 'recoil';\n\nimport { playersData } from './players';\nimport { TeamTypes } from 'types/player';\n\nexport const userNameState = atom({\n    key: 'userNameState',\n    default: '' as string,\n});\n\nexport const userIDState = atom({\n    key: 'userIDState',\n    default: '' as string,\n});\n\nexport const userRoomState = atom({\n    key: 'userRoomState',\n    default: '' as string,\n});\n\nexport const userIndexState = selector({\n    key: 'userIndexState',\n    get: ({get}) => {\n        const userName = get(userNameState);\n        const playerList = get(playersData);\n        return playerList.findIndex(data=>data.player===userName) as number;\n    }\n})\n\nexport const userTeamState = selector({\n    key: 'userTeamState',\n    get:  ({get}) => {\n        const userName = get(userNameState);\n        const playerList = get(playersData);\n        if(!playerList.length) return null\n        return playerList.find(data=>data.player===userName)?.team as TeamTypes | null;\n    }\n})\n\nexport const userReadyState = selector({\n    key: 'userReadyState',\n    get:  ({get}) => {\n        const userName = get(userNameState);\n        const playerList = get(playersData);\n        if(!playerList.length) return false;\n        return playerList.find(data=>data.player===userName)?.ready as boolean;\n    }\n})\n\nexport const navState = atom({\n    key: 'navState',\n    default: null as string | null,\n})","import React from 'react';\nimport db from \"database\";\nimport styled from 'styled-components';\nimport { color } from 'style/theme'\nimport { useSetRecoilState, useRecoilValue, useRecoilState } from \"recoil\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Modal from \"components/Global/Modal\";\nimport Button from 'components/Global/Button';\nimport Input from 'components/Global/Input';\n\nimport { RoomList } from 'types/room';\nimport userGameRoomName from \"util/hook/useGameRoomName\";\nimport generateUniqueId from \"util/generateUniqueId\";\nimport { userNameState, userRoomState, userIDState } from \"store/user\";\nimport { themeState } from 'store/theme';\n\nconst themeData = {\n\tlight: {\n\t\tbg: 'white',\n\t\tfg: color.$brown_color,\n\t\tboxBorder: 'none',\n\t\tcancel_bg: color.$warn_red_color,\n\t\tcancel_fg: 'white',\n\t\ttitle_bg: color.$pink_color,\n\t\ttitle_fg: 'white',\n\t\tsub_title_fg: '#888',\n\t\tsub_title_bb: color.$under_line_color,\n\t},\n\tdark: {\n\t\tbg: color.$dark_bg_color,\n\t\tfg: color.$fluorescent_pink_color,\n\t\tboxBorder: '1px solid' + color.$fluorescent_pink_color,\n\t\tcancel_bg: color.$dark_bg_color,\n\t\tcancel_fg: color.$fluorescent_pink_color,\n\t\ttitle_bg: color.$dark_bg_color,\n\t\ttitle_fg: color.$fluorescent_pink_color,\n\t\tsub_title_fg: '#E5D5D5',\n\t\tsub_title_bb: color.$dark_dim_border_color,\n\t},\n}\n\n\nconst Content = styled.div`\n\twidth: 80vw;\n\tposition: absolute;\n\tborder-radius: 10px;\n\toverflow: hidden;\n\tposition: relative;\n\tborder: ${({ theme }) => theme.boxBorder};\n\tbackground-color: ${({ theme }) => theme.bg};\n\n\t.cancel_button {\n\t\tfont-size: 14px;\n\t\tposition: absolute;\n\t\tcursor: pointer;\n\t\tborder-radius: 50%;\n\t\tpadding: 3px;\n\t\tright: 5px;\n\t\ttop: 5px;\n\t\tcolor: ${({ theme }) => theme.cancel_fg};\n\t\tborder: ${({ theme }) => theme.boxBorder};\n\t\tbackground-color: ${({ theme }) => theme.cancel_bg};\n\t}\n\n\t& > .title {\n\t\tpadding: 15px;\n\t\ttext-align: center;\n\t\tfont-size: 20px;\n\t\tletter-spacing: 2px;\n\t\tcolor: ${({ theme }) => theme.title_fg};\n\t\tbackground-color: ${({ theme }) => theme.title_bg};\n\t\tborder-bottom: ${({ theme }) => theme.box_border};\n\t}\n\n\t.block {\n\t\tpadding: 15px 15px 5px;\n\n\t\t.title {\n\t\t\tmargin: 0;\n\t\t\ttext-align: center;\n\t\t\tpadding-bottom: 5px;\n\t\t\tfont-size: 14px;\n\t\t\tletter-spacing: 1px;\n\t\t\tcolor: ${({ theme }) => theme.sub_title_fg};;\n\t\t\tborder-bottom: 1.5px solid ${({ theme }) => theme.sub_title_bb};\n\t\t}\n\n\t\t&.join_exist_room {\n\t\t\t.room_list {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\tmargin-top: 10px;\n\t\t\t\tmax-height: 150px;\n\t\t\t\toverflow: scroll;\n\t\t\t}\n\n\t\t\t.no_room {\n\t\t\tmargin-top: 15px;\n\t\t\tcolor: ${color.$unable_color};\n\t\t\ttext-align: center;\n\t\t\tfont-size: 14px;\n\t\t\tletter-spacing: 1px;\n\t\t\t}\n\n\t\t\t.room {\n\t\t\tmargin-bottom: 10px;\n\t\t\tfont-size: 16px;\n\t\t\tletter-spacing: 1px;\n\t\t\t}\n\t\t}\n\n\t\t&.create_room {\n\t\t\t.content {\n\t\t\tpadding: 10px;\n\t\t\tbox-sizing: border-box;\n\n\t\t\t\tform {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tjustify-content: space-between;\n\n\t\t\t\t\t.room_name {\n\t\t\t\t\t\tmargin-right: 20px;\n\t\t\t\t\t\ttext-align: left;\n\t\t\t\t\t\tfont-size: 18px;\n\t\t\t\t\t\tletter-spacing: 2px;\n\t\t\t\t\t\tcolor: ${({ theme }) => theme.fg};\n\t\t\t\t\t\tborder-bottom: 2px solid ${color.$unable_color};\n\n\t\t\t\t\t\t&::placeholder {\n\t\t\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\t\t\tcolor: ${color.$unable_color};\n\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\tmargin: 10px 0 0;\n\t\t\t\t\t\t\tletter-spacing: 2px;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t.warn_message {\n\t\t\t\t\tmargin: 10px 0 0;\n\t\t\t\t\tfont-size: 12px;\n\t\t\t\t\tletter-spacing: 1px;\n\t\t\t\t\tcolor: ${color.$warn_red_color};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`\n\ninterface CreateButtonProperty {\n\tonClick: (e: React.MouseEvent<HTMLElement>) => void;\n\tclassName: string;\n\tisLengthValid: boolean;\n\tchildren: React.ReactNode;\n}\nconst CreateButton = (props: CreateButtonProperty) => {\n\tconst { onClick, className, isLengthValid } = props;\n\tconst [theme] = useRecoilState(themeState);\n\tconst getButtonColor = () => {\n\t\tswitch (theme) {\n\t\t\tcase 'light':\n\t\t\tdefault:\n\t\t\t\treturn isLengthValid ? color.$highlight_color : color.$unable_color;\n\t\t\tcase 'dark':\n\t\t\t\treturn isLengthValid ? color.$fluorescent_pink_color : color.$dark_dim_border_color;\n\t\t}\n\t};\n\treturn (\n\t\t<Button\n\t\t\tcolor={getButtonColor()}\n\t\t\tonClick={(e) => {\n\t\t\t\tif (!isLengthValid) return;\n\t\t\t\tonClick(e)\n\t\t\t}}\n\t\t\tclassName={className}\n\t\t>建立</Button>\n\t)\n};\n\ninterface RoomButtonProperty {\n\tonClick: () => void;\n\tclassName: string;\n\troomName: string;\n}\n\nconst RoomButton = (props: RoomButtonProperty) => {\n\tconst { onClick, className, roomName } = props;\n\tconst [theme] = useRecoilState(themeState);\n\tconst getButtonColor = () => {\n\t\tswitch (theme) {\n\t\t\tcase 'light':\n\t\t\tdefault:\n\t\t\t\treturn color.$green_color\n\t\t\tcase 'dark':\n\t\t\t\treturn color.$fluorescent_pink_color\n\t\t}\n\t}\n\n\treturn (\n\t\t<Button\n\t\t\tclassName={className}\n\t\t\tonClick={onClick}\n\t\t\tcolor={getButtonColor()}>\n\t\t\t{roomName}\n\t\t</Button>)\n}\n\ninterface RoomDialogProperty {\n\tclassName: string;\n\tactive: Boolean;\n\troomList: RoomList;\n\tcloseRoomList: (e: React.MouseEvent<HTMLElement>) => void;\n}\nconst RoomDialog = (props: RoomDialogProperty) => {\n\tconst { active, className, closeRoomList, roomList } = props;\n\tconst history = useHistory();\n\tconst [theme] = useRecoilState(themeState);\n\tconst [\n\t\t{ gameRoomName, warnMessage },\n\t\t{ setRoomName, validateRoomName, setWarnMessage }\n\t] = userGameRoomName();\n\tconst userName = useRecoilValue(userNameState);\n\tconst setLocalRoom = useSetRecoilState(userRoomState);\n\tconst setUserID = useSetRecoilState(userIDState);\n\n\tconst createRoom = (e: React.MouseEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\t\tconst isValid = validateRoomName();\n\n\t\tif (isValid) {\n\t\t\tconst roomID = generateUniqueId();\n\t\t\tsetLocalRoom(roomID);\n\t\t\tupdateDbRoomData(roomID, gameRoomName);\n\t\t}\n\t}\n\n\tconst pickExistRoom = (roomID: string) => {\n\t\tsetLocalRoom(roomID);\n\t\tupdateDbRoomData(roomID);\n\t}\n\n\tconst updateDbRoomData = async (roomID: string, roomName?: string) => {\n\t\tconst roomRef = db.database().ref(`/${roomID}`);\n\t\tconst userID = generateUniqueId() as string;\n\t\tconst current = new Date();\n\t\tconst timestamp = Date.parse(current.toString()) as number;\n\t\tsetUserID(userID);\n\t\tawait roomRef.child('playersInfo')\n\t\t\t.child(userID)\n\t\t\t.update({ timestamp, userID, player: userName });\n\t\tif (roomName) {\n\t\t\tawait roomRef.update({ timestamp, roomName });\n\t\t}\n\t\tconst toPath = `/${roomID}/waiting_room/${userID}`\n\t\thistory.push(toPath);\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\tactive={active}\n\t\t\tonDeactive={(e: React.MouseEvent<HTMLElement>) => {\n\t\t\t\tcloseRoomList(e);\n\t\t\t}}\n\t\t\tclassName={className}>\n\t\t\t<Content\n\t\t\t\ttheme={themeData[theme]}\n\t\t\t\tonClick={e => e.stopPropagation()}\n\t\t\t\tclassName=\"content\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={(e) => closeRoomList(e)}\n\t\t\t\t\tclassName=\"cancel_button\">×</button>\n\t\t\t\t<div className=\"title\">選擇或創建房間</div>\n\t\t\t\t<div className=\"room_choose\">\n\t\t\t\t\t<div className=\"block join_exist_room\">\n\t\t\t\t\t\t<p className=\"title\">選擇已經存在的房間</p>\n\t\t\t\t\t\t{!roomList.length\n\t\t\t\t\t\t\t? <p className=\"no_room\">目前尚無空房</p>\n\t\t\t\t\t\t\t: <div className=\"room_list\">\n\t\t\t\t\t\t\t\t{roomList.map(room => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<RoomButton\n\t\t\t\t\t\t\t\t\t\t\tkey={room.roomID}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => pickExistRoom(room.roomID)}\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"room\"\n\t\t\t\t\t\t\t\t\t\t\troomName={room.roomName} />)\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"block create_room\">\n\t\t\t\t\t\t<p className=\"title\">建立一個房間</p>\n\t\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t\t<form>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tclassName=\"room_name\"\n\t\t\t\t\t\t\t\t\tvalue={gameRoomName}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tsetWarnMessage('');\n\t\t\t\t\t\t\t\t\t\tsetRoomName(e.target.value)\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tmaxLength={20}\n\t\t\t\t\t\t\t\t\tplaceholder=\"請輸入3-20字元\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<CreateButton\n\t\t\t\t\t\t\t\t\tclassName='create_button'\n\t\t\t\t\t\t\t\t\tisLengthValid={gameRoomName.length > 2}\n\t\t\t\t\t\t\t\t\tonClick={e => createRoom(e)}\n\t\t\t\t\t\t\t\t>建立</CreateButton>\n\t\t\t\t\t\t\t</form>\n\t\t\t\t\t\t\t{warnMessage && <p className='warn_message'>{warnMessage}</p>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div >\n\t\t\t</Content >\n\t\t</Modal >\n\t);\n}\n\nexport default RoomDialog;","import React from 'react';\nimport styled from 'styled-components';\nimport { color } from 'style/theme';\nimport classnames from 'classnames';\nimport { themeState } from 'store/theme';\nimport { Theme, ThemeTypes } from 'types/theme';\nimport { useRecoilState } from 'recoil';\n\n\nconst Toggler = styled.div`\n    display: flex;\n    align-items: center;\n    width: 40px;\n    height: 17px;\n    padding: 2px;\n    border-radius: 40px;\n    transition: 0.3s all;\n    cursor: pointer;\n\n    .toggle_button {\n        background-color: white;\n        width: 17px;\n        height: 17px;\n        border-radius: 100%;\n        transition: 0.3s all;\n        cursor: pointer;\n    }\n\n    &.on_page {\n\t\tposition: absolute;\n\t\ttop: 20px;\n\t\tright: 20px;\n\t}\n\n    &.light_mode {\n        background-color: ${color.$pink_color};\n        border: 1px solid transparent;\n        justify-content: flex-start;\n        .toggle_button {\n            margin-left: 0;\n        }\n    }\n\n    &.dark_mode {\n        background-color: ${color.$dark_dim_bg_color};\n        border: 1px solid ${color.$dark_border_color};\n        .toggle_button {\n            margin-left: calc( 40px - 17px);\n        }\n    }\n`\ninterface ThemeTogglerProperty {\n    className?: string;\n}\n\nconst ThemeToggler = (props: ThemeTogglerProperty) => {\n    const { className } = props;\n    const [theme, toggleTheme] = useRecoilState(themeState);\n\n    const setTheme = (theme: Theme) => {\n        toggleTheme(theme);\n        localStorage.setItem('cake-and-bridge-theme', JSON.stringify(theme));\n    }\n\n    const handleToggleTheme = () => {\n        theme === ThemeTypes.Light\n            ? setTheme(ThemeTypes.Dark)\n            : setTheme(ThemeTypes.Light);\n    };\n\n    return (\n        <Toggler\n            onClick={handleToggleTheme}\n            className={classnames(\"theme_toggler\", className, {\n                'light_mode': theme === ThemeTypes.Light,\n                'dark_mode': theme === ThemeTypes.Dark,\n            })}>\n            <button\n                className=\"toggle_button\" />\n        </Toggler>\n    )\n}\n\nexport default ThemeToggler;","import { useState } from 'react';\nimport { useRecoilState } from \"recoil\";\nimport { userNameState } from \"store/user\";\n\ntype Values = {\n    userName: string;\n    warnMessage: string;\n}\n\ntype Handlers = {\n    setUserName: React.Dispatch<React.SetStateAction<string>>;\n    setWarnMessage: React.Dispatch<React.SetStateAction<string>>\n    validateUserName: () => boolean;\n}\n\nconst useUserName = (): [Values, Handlers] => {\n    const [userName, setUserName] = useRecoilState(userNameState);\n    const [warnMessage, setWarnMessage] = useState('');\n\n    const validateUserName = () => {\n        const regex = /^[^.]*$/g;\n        const isVaild = regex.test(userName);\n\n        if (!userName) {\n            setWarnMessage('請輸入至少一個字');\n\t\t\treturn false;\n        }\n\n\t\tif (!isVaild) {\n\t\t\tsetWarnMessage('請勿輸入 . 作為名字');\n\t\t\treturn false;\n\t\t}\n\n\t\tsetWarnMessage('');\n\t\treturn true;\n\t};\n\n    return [\n        { userName, warnMessage },\n        { setUserName, setWarnMessage, validateUserName }\n    ]\n}\n\nexport default useUserName;\n","import {\n    atom\n} from 'recoil';\n\nexport const modalState = atom({\n    key: 'modalState',\n    default: null as string | null,\n});","import {\n    atom, selector,\n} from 'recoil';\n\nimport { Card, OtherPlayerDeck } from 'types/card';\n\nexport const userDeckState = atom({\n    key: 'userDeckState',\n    default: [] as Card[],\n});\n\n\n\nexport const otherPlayerDeckState = atom({\n    key: 'otherPlayerDeckState',\n    default: {} as OtherPlayerDeck,\n});\n\nexport const badDeck = selector({\n    key: 'backDeck',\n    get: ({ get }) => {\n        const userDeck = get(userDeckState);\n        if (userDeck.length === 13) {\n            const deckPoint = userDeck\n                .map((card) => card.number)\n                .reduce((a, b) => {\n                    const point = b > 9 ? b - 9 : 0;\n                    return a + point;\n                }, 0);\n            return deckPoint > 3 ? false : true;\n        } else {\n            return false;\n        }\n    }\n});\n\nexport const responseToBadDeck = atom({\n    key: 'responseToBadDeck',\n    default: null as Boolean | null,\n})\n\nexport const OKtoPlay = selector({\n    key: 'OKtoPlay',\n    get: ({ get }) => {\n        const isBadLuck = get(badDeck);\n        if(!isBadLuck) {\n            return true;\n        } else {\n            const isOKtoPlayWithBadDeck = get(responseToBadDeck);\n            if(isOKtoPlayWithBadDeck){\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n});","import {\n    atom, selector\n} from 'recoil';\n\nimport { CardSuitType, Card } from 'types/card';\nimport { CalledBind } from 'types/bind';\nimport { playersData } from './players';\nimport { TeamTypes } from 'types/player';\n\nexport const userPickBindState = atom({\n    key: 'userPickBind',\n    default: null as null | Card,\n});\n\nexport const nowBindState = atom({\n    key: 'nowBindState',\n    default: { player: null, number:0, suit: CardSuitType.Club },\n});\n\nexport const userPassState = atom({\n    key: 'userPassState',\n    default: false as Boolean,\n});\n\nexport const playersCalledListState = atom({\n    key: 'playersCalledListState',\n    default: {} as { [key: string]: CalledBind[] },\n});\n\nexport const availibleTricksState = selector({\n    key: 'availibleTricksState',\n    get: ({get}) => {\n        const { number, suit} = get(nowBindState);\n        const tricks = [1, 2, 3, 4, 5, 6]\n        let min: number;\n        if(suit === CardSuitType.Spade) {\n            min =  number + 1;\n        } else {\n            min =  number;\n        }\n        const tricksArray = tricks.filter(trick => trick >= min)\n        return tricksArray;\n    }},\n);\n\nexport const teamShouldWinState = selector({\n    key: 'teamShouldWinState',\n    get: ({get}) => {\n        const {player: calledPlayer, number} = get(nowBindState);\n        if(!number || number === 1 ){\n            return {\n                team1: 7,\n                team2: 7,\n            }\n        }\n        const players = get(playersData);\n        const calledTeam = players.find(p => p.player === calledPlayer)?.team || TeamTypes.TeamOne;\n        const anotherTeam = [TeamTypes.TeamOne,TeamTypes.TeamTwo].filter(team=> team !== calledTeam)[0];\n        const calledTeamShouldWin = 6 + number;\n        const anotherTeamShouldWin = 14 - calledTeamShouldWin;\n        return {\n            [calledTeam]: calledTeamShouldWin,\n            [anotherTeam]: anotherTeamShouldWin\n        }\n    }},\n);","import React from 'react';\nimport classnames from 'classnames'\nimport styled from 'styled-components';\nimport { color } from 'style/theme'\nimport { TeamTypes, PlayerData } from 'types/player';\nimport { playersData } from 'store/players';\nimport { useRecoilValue, useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\n\nconst themeData = {\n    light: {\n        w_border: 'none',\n        st_bg: 'rgb(241, 224, 224)',\n        st_border: 'none',\n        cl_bg: 'rgb(206, 190, 180)',\n        cl_border: 'none',\n        name_bg: 'white',\n        name_st_fg: color.$title_font_color,\n        name_cl_fg: color.$title_font_color,\n        ready_fg: color.$title_font_color,\n        ready_bg: '#F3DE93',\n        ready_border: '2px solid white',\n    },\n    dark: {\n        w_border: '1px solid' + color.$dark_dim_border_color,\n        st_bg: color.$dark_dim_bg_color,\n        st_border: '1px solid' + color.$fluorescent_pink_color,\n        cl_bg: color.$dark_dim_bg_color,\n        cl_border: '1px solid' + color.$fluorescent_yellow_color,\n        name_bg: 'transparent',\n        name_st_fg: color.$fluorescent_pink_color,\n        name_cl_fg: color.$fluorescent_yellow_color,\n        ready_fg: color.$title_font_color,\n        ready_bg: 'transparent',\n        ready_border: '2px solid white',\n    },\n}\n\nconst Window = styled.div`\n    border-radius: 5px;\n    overflow: hidden;\n    display: flex;\n    flex-wrap: wrap;\n    width: 90vw;\n    height: 90vw;\n    margin-bottom: 30px;\n    border: ${({ theme }) => theme.w_border};\n\n    .player {\n        flex-basis: 50%;\n        height: 45vw;\n        display: flex;\n        flex-direction: column;\n        letter-spacing: 1px;\n        justify-content: flex-end;\n        align-items: stretch;\n        transition: all 0.3s;\n        position: relative;\n        padding: 15px;\n        box-sizing: border-box;\n\n        &:nth-child(1) {\n            border-right: ${({ theme }) => theme.w_border};\n            border-bottom: ${({ theme }) => theme.w_border};\n        }\n\n        &:nth-child(2) {\n            border-bottom: ${({ theme }) => theme.w_border};\n        }\n\n        &:nth-child(3) {\n            border-right: ${({ theme }) => theme.w_border};\n        }\n\n        &.strawberry_team {\n            background-color: ${({ theme }) => theme.st_bg};\n            \n            .player__name {\n                color: ${({ theme }) => theme.name_st_fg};\n                border: ${({ theme }) => theme.st_border};\n            }\n        }\n\n        &.canele_team {\n            background-color: ${({ theme }) => theme.cl_bg};\n            .player__name {\n                color: ${({ theme }) => theme.name_cl_fg};\n                border: ${({ theme }) => theme.cl_border};\n            }\n        }\n\n        &__name {\n            text-align: center;\n            flex: 0 1 auto;\n            border: 2px solid transparent;\n            border-radius: 20px;\n            font-size: 20px;\n            padding: 7px 10px;\n            margin: 0;\n            position: relative;\n            transition: 0.3s all;\n            background-color: ${({ theme }) => theme.name_bg};\n        }\n    }    \n`\n\ninterface PlayerBoxProperty {\n    order: PlayerOrders.First | PlayerOrders.Second | PlayerOrders.Third | PlayerOrders.Fourth;\n    playerData: PlayerData;\n}\n\nenum PlayerOrders {\n    First,\n    Second,\n    Third,\n    Fourth\n}\nconst PlayerBox = (props: PlayerBoxProperty) => {\n    const { order, playerData } = props;\n    const playerName = playerData ? playerData.player : '';\n\n    const defaultTeam =\n        order === PlayerOrders.First || order === PlayerOrders.Fourth\n            ? TeamTypes.TeamOne\n            : TeamTypes.TeamTwo;\n    const playerTeam = playerData ? playerData.team : defaultTeam\n\n    return (\n        <div\n            className={classnames(\n                'player',\n                `player__${order}`, {\n                'strawberry_team': playerTeam === TeamTypes.TeamOne,\n                'canele_team': playerTeam === TeamTypes.TeamTwo,\n            })}>\n            {playerName &&\n                <p className={classnames('player__name', { 'ready_to_go': playerData.ready })}>\n                    {playerName}\n                </p>\n            }\n        </div>\n    )\n}\n\nconst PlayerWindow = () => {\n    const [theme] = useRecoilState(themeState);\n    const playerList = useRecoilValue(playersData);\n    const playersOrder = [PlayerOrders.First, PlayerOrders.Second, PlayerOrders.Third, PlayerOrders.Fourth];\n    return (\n        <Window\n            theme={themeData[theme]}\n            className=\"player_window\">\n            {playersOrder.map((order, index) => (\n                <PlayerBox \n                    key={order} \n                    order={order}\n                    playerData={playerList[index]} \n                />))}\n        </Window >\n    )\n};\n\nexport default PlayerWindow;","import {\n    atom\n} from 'recoil';\n\nimport { ScoreData } from 'types/score';\n\nconst defaultState: ScoreData = { team1: 0, team2: 0}\n\nexport const teamScoresState = atom({\n    key: 'teamScoresState',\n    default: defaultState\n});","import {\n    atom, selector,\n} from 'recoil';\nimport { Suits, Card } from 'types/card'\nimport { userNameState } from './user';\nimport { teamShouldWinState } from './bind';\nimport { teamScoresState } from './score';\nimport { TeamTypes } from 'types/player';\n\nexport const currentPlayerName = atom({\n    key: 'currentPlayerName',\n    default: '' as string,\n});\n\nexport const thisRoundSuitState = atom({\n    key: 'thisRoundSuit',\n    default: null as null | Suits,\n});\n\nexport const thisRoundCardsState = atom({\n    key: 'thisRoundCardsState',\n    default: [] as Card[],\n});\n\nexport const trumpState = atom({\n    key: 'trumpState',\n    default: null as null | Card,\n})\n\nexport const isUserTurnState = selector({\n    key: 'isUserTurnState',\n    get: ({get}) => {\n        const nowPlayer = get(currentPlayerName);\n        const userName = get(userNameState);\n        return userName === nowPlayer;\n    }\n})\n\nexport const isUserLastPlayerState = selector({\n    key: 'isUserLastPlayerState',\n    get: ({get}) => {\n        const thisRoundCards = get(thisRoundCardsState);\n        if(thisRoundCards.filter(card => typeof card === 'object').length === 3) {\n            return true\n        } else {\n            return false\n        }\n    }\n});\n\nexport const isThisRoundEndState = selector({\n    key: 'isThisRoundEndState',\n    get: ({get}) => {\n        const thisRoundCards = get(thisRoundCardsState);\n        if(thisRoundCards.filter(card => typeof card === 'object').length === 4) {\n            return true\n        } else {\n            return false\n        }\n    }\n})\n\nexport const isGameEndState = selector({\n    key: 'isGameEndState',\n    get: ({ get }) => {\n        const { team1: team1ShouldWin, team2: team2ShouldWin } = get(teamShouldWinState);\n        const { team1: team1Score, team2: team2Score } = get(teamScoresState);\n\n        if(team1ShouldWin === team1Score){\n            return TeamTypes.TeamOne;\n        } else if (team2ShouldWin === team2Score) {\n            return TeamTypes.TeamTwo;\n        } else {\n            return null;\n        }\n    }\n})\n","import { atom } from 'recoil';\nimport { Card } from 'types/card';\n\nexport const userWinTricksState = atom({\n    key: 'userWinTricksState',\n    default: [] as Card[][],\n});\n","import { useResetRecoilState } from \"recoil\";\nimport { userNameState, userRoomState, userIDState } from 'store/user';\nimport { modalState } from 'store/modal';\nimport { userDeckState } from 'store/deck';\nimport { thisRoundCardsState, trumpState } from 'store/game';\nimport { playersData } from 'store/players';\nimport { teamScoresState } from 'store/score';\nimport { userWinTricksState } from 'store/winTricks';\nimport {  userPickBindState, nowBindState, userPassState, playersCalledListState } from 'store/bind';\n\n\nconst useInitData = () => {\n    const initUserName = useResetRecoilState(userNameState);\n\tconst initUserRoom = useResetRecoilState(userRoomState);\n\tconst initUserID = useResetRecoilState(userIDState);\n    const initModalType = useResetRecoilState(modalState);\n    const initUserDeck = useResetRecoilState(userDeckState);\n    const initScore = useResetRecoilState(teamScoresState);\n    const initUserPickBind = useResetRecoilState(userPickBindState);\n    const initNowBind = useResetRecoilState(nowBindState);\n    const initPassState = useResetRecoilState(userPassState);\n    const initRoundCards = useResetRecoilState(thisRoundCardsState);\n    const initTrump = useResetRecoilState(trumpState);\n    const initCalledList = useResetRecoilState(playersCalledListState);\n    const initWinTricks = useResetRecoilState(userWinTricksState);\n    const initPlayerData = useResetRecoilState(playersData);\n\n    const initUserData = () => {\n        initUserName();\n\t\tinitUserRoom();\n        initUserID();\n    }\n\n    const initGameRoomData = () => {\n        initUserDeck();\n        initModalType();\n        initScore();\n        initUserPickBind();\n        initNowBind();\n        initPassState();\n        initCalledList();\n        initRoundCards();\n        initTrump();\n        initWinTricks();\n    }\n\n    const initGameData = () => {\n        initUserData();\n        initGameRoomData();\n        initPlayerData();\n    }\n\n    return [{ initGameData, initGameRoomData }]\n}\n\nexport default useInitData;","import React, { useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport db from \"database\";\n\nimport Logo from \"components/Home/Logo\";\nimport RoomDialog from \"components/Home/RoomDialog\";\nimport Input from \"components/Global/Input\";\nimport Button from \"components/Global/Button\";\nimport ThemeToggler from 'components/Global/ThemeToggler';\n\nimport { RoomList, FirebaseRoomsData } from 'types/room';\n\nimport useUserName from \"util/hook/useUserName\";\nimport useInitData from \"util/hook/useInitData\";\nimport { themeState } from 'store/theme';\nimport styled from \"styled-components\";\nimport { color } from \"style/theme\";\n\nconst themeData = {\n\tlight: {\n\t\tbg: color.$theme_background,\n\t\tfg: color.$title_font_color,\n\t\tname_fg: color.$title_font_color,\n\t\tborder: color.$title_font_color,\n\t\tbutton_color: color.$pink_color,\n\t},\n\tdark: {\n\t\tbg: color.$dark_bg_color,\n\t\tfg: color.$dark_default_font_color,\n\t\tname_fg: color.$fluorescent_pink_color,\n\t\tborder: color.$dark_border_color,\n\t\tbutton_color: color.$fluorescent_pink_color,\n\t},\n}\n\nconst NameForm = styled.form`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\tp {\n\t\tfont-size: 22px;\n\t\tletter-spacing: 3px;\n\t\tmargin: 0 0 25px 0;\n\t\ttransition: .3s all;\n\t\tcolor: ${({ theme }) => theme.fg};\n\t}\n\n\t.name_space{\n\t\tpadding: 5px;\n\t\tfont-size: 22px;\n\t\tline-height: 25px;\n\t\tletter-spacing: 2px;\n\t\tcolor: ${({ theme }) => theme.name_fg};\n\t\tborder-bottom: 2px solid ${({ theme }) => theme.border};\n\t}\n\n\t.warn_message {\n\t\tmargin-top: 10px;\n\t\tcolor: ${({ theme }) => theme.name_fg};\n\t\topacity: 0.6;\n\t\tletter-spacing: 1px;\n\t}\n\n\t.enter_button {\n\t\tmargin-top: 20px;\n\t}\n`;\n\ninterface NameFillInProperty {\n\topenRoomList: () => void;\n}\n\nconst NameFillIn = (props: NameFillInProperty) => {\n\tconst { openRoomList } = props;\n\tconst [\n\t\t{ userName, warnMessage },\n\t\t{ setUserName, validateUserName, setWarnMessage }\n\t] = useUserName();\n\n\tconst theme = useRecoilValue(themeState);\n\tconst handleButtonClick = (e: React.MouseEvent<HTMLElement>) => {\n\t\te.preventDefault();\n\t\tconst isValid = validateUserName();\n\n\t\tif (isValid) {\n\t\t\topenRoomList();\n\t\t}\n\t};\n\n\treturn (\n\t\t<NameForm theme={themeData[theme]} id=\"name\" className=\"user_input\">\n\t\t\t<p>請輸入名字</p>\n\t\t\t<Input\n\t\t\t\tclassName=\"name_space\"\n\t\t\t\tonFocus={() => setWarnMessage('')}\n\t\t\t\tmaxLength={8}\n\t\t\t\tonChange={(e) => setUserName(e.target.value)}\n\t\t\t\tvalue={userName}\n\t\t\t/>\n\t\t\t{warnMessage && <span className=\"warn_message\">{warnMessage}</span>}\n\t\t\t<Button\n\t\t\t\tclassName=\"enter_button\"\n\t\t\t\tcolor={themeData[theme].button_color}\n\t\t\t\tonClick={handleButtonClick}\n\t\t\t\ttype=\"submit\"\n\t\t\t>\n\t\t\t\t加入遊戲\n\t\t\t</Button>\n\t\t</NameForm>\n\t);\n};\n\nconst HomePage = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-around;\n\ttransition: .3s background-color;\n    background-color: ${({ theme }) => theme.bg};\n`;\n\nconst Home = () => {\n\tconst [showRoomDialog, toggleRoomDialog] = useState<boolean>(false);\n\tconst [roomList, setRoomList] = useState<RoomList>([]);\n\tconst [{ initGameData }] = useInitData();\n\tconst theme = useRecoilValue(themeState);\n\n\tReact.useEffect(() => {\n\t\tinitGameData();\n\t\tsubscribeRooms();\n\t\treturn () => removeListeners();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [])\n\n\tconst subscribeRooms = () => {\n\t\tconst Firebase = db.database().ref(\"/\");\n\t\tFirebase.on(\"value\", (data) => {\n\t\t\tconst roomsData = data.val() as FirebaseRoomsData;\n\t\t\tif (!roomsData) {\n\t\t\t\tsetRoomList([]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst filterOutAbandonedRoom = Object.entries(roomsData)\n\t\t\t\t.filter(data => data[1].playersInfo)\n\t\t\t\t.reduce((obj, data) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...obj,\n\t\t\t\t\t\t[data[0]]: data[1]\n\t\t\t\t\t};\n\t\t\t\t}, {});\n\n\t\t\tFirebase.set(filterOutAbandonedRoom);\n\n\t\t\tconst rooms = Object.entries(roomsData)\n\t\t\t\t.map(room => ({\n\t\t\t\t\troomID: room[0],\n\t\t\t\t\t...room[1]\n\t\t\t\t}))\n\t\t\t\t.filter(room => {\n\t\t\t\t\treturn room.playersInfo && Object.values(room.playersInfo).length < 4;\n\t\t\t\t})\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\treturn b.timestamp - a.timestamp;\n\t\t\t\t})\n\t\t\tsetRoomList(rooms as RoomList);\n\t\t});\n\t};\n\n\tconst removeListeners = () => {\n\t\tconst Firebase = db.database().ref(\"/\");\n\t\tFirebase.off();\n\t};\n\n\treturn (\n\t\t<HomePage theme={themeData[theme]}>\n\t\t\t<ThemeToggler className=\"on_page\" />\n\t\t\t<Logo className=\"logo\" />\n\t\t\t<NameFillIn openRoomList={() => toggleRoomDialog(true)} />\n\t\t\t<RoomDialog\n\t\t\t\tactive={showRoomDialog}\n\t\t\t\troomList={roomList}\n\t\t\t\tclassName=\"room_list_dialog\"\n\t\t\t\tcloseRoomList={() => toggleRoomDialog(false)}\n\t\t\t/>\n\t\t</HomePage>\n\t);\n};\n\nexport default Home;\n","import React from \"react\";\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\n\nconst themeData = {\n    light: {\n        bg: 'white',\n        border: '#dcdcdc',\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        border: color.$dark_dim_border_color,\n    },\n}\n\nconst StyledRadio = styled.span<RadioProperty>`\n    vertical-align: middle;\n    display: inline-block;\n    cursor: pointer;\n    position: relative;\n    display: inline-block;\n    border-radius: 100%;\n    width: ${(props) => (`${props.size}px`)};\n    height: ${(props) => (`${props.size}px`)};\n    margin-right: ${(props) => (`${props.marginRight}px`)};\n    transition: 0.3s all;\n    background-color: ${({ theme }) => theme.bg};\n    border: ${({ border }) => border};\n\n    &::after {\n        content: \"\";\n        display: block;\n        width: 70%;\n        height: 70%;\n        border-radius: 50%;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n    }\n`\n\ninterface RadioProperty {\n    className?: string;\n    size: number;\n    marginRight: number;\n    border: string;\n}\n\nconst Radio = (props: RadioProperty) => {\n    const { className, size, marginRight, border } = props;\n    const [theme] = useRecoilState(themeState);\n    return (\n        <StyledRadio\n            theme={themeData[theme]}\n            border={border}\n            size={size}\n            marginRight={marginRight}\n            className={className}\n        ></StyledRadio>\n    )\n}\n\nexport default Radio;","import React from \"react\";\nimport classnames from 'classnames'\nimport styled from 'styled-components';\nimport db from \"database\";\nimport { useRecoilValue, useRecoilState } from 'recoil';\n\nimport { Team, TeamTypes } from 'types/player';\nimport { themeState } from 'store/theme';\nimport { userTeamState } from 'store/user';\nimport { color } from 'style/theme';\nimport Radio from 'components/Global/Radio'\n\nconst themeData = {\n    light: {\n        default_f: '#A7A7A7',\n        st_fg: color.$pink_color,\n        cl_fg: color.$brown_color,\n    },\n    dark: {\n        default_f: '#787878',\n        st_fg: color.$fluorescent_pink_color,\n        cl_fg: color.$fluorescent_yellow_color,\n    },\n}\n\nconst StyledRadio = styled.div`\n    display: flex;\n    align-items: center;\n    font-size: 18px;\n    letter-spacing: 1px;\n    transition: 0.3s all;\n    color: ${({ theme }) => theme.default_f};\n\n    &.chosen {\n        &.team1 {\n            color: ${({ theme }) => theme.st_fg};\n\n            .radio::after {\n                transition: 0.3s all;\n                background-color: ${({ theme }) => theme.st_fg};\n            }\n        }\n\n        &.team2 {\n            color: ${({ theme }) => theme.cl_fg};\n\n            .radio::after {\n                transition: 0.3s all;\n                background-color: ${({ theme }) => theme.cl_fg};\n            }\n        }\n    }\n`\nconst RadioArea = styled.div`\n    align-self: flex-start;\n    width: 100%;\n\n    .options {\n        display: flex;\n        width: 100%;\n        justify-content: space-around;\n        font-size: 0;\n    }\n`\n\ninterface TeamOptionProperty {\n    team: '草莓糕' | '可麗露';\n    isChosen: boolean;\n    teamIndex: Team;\n    onClick: () => void;\n}\n\nconst TeamOption = (props: TeamOptionProperty) => {\n    const { team, isChosen, onClick = () => { }, teamIndex } = props;\n    const [theme] = useRecoilState(themeState);\n    const getBorder = () => {\n        switch (theme) {\n            case 'light':\n            default:\n                return 'none'\n            case 'dark':\n                if (isChosen) {\n                    return `1px solid ${teamIndex === TeamTypes.TeamOne \n                        ? themeData[theme].st_fg \n                        : themeData[theme].cl_fg}`\n                } else {\n                    return `1px solid ${color.$dark_dim_border_color}`\n                }\n        }\n    }\n    return (\n        <StyledRadio\n            theme={themeData[theme]}\n            onClick={onClick}\n            className={classnames('option', teamIndex, {\n                'chosen': isChosen,\n            })}>\n            <Radio\n                border={getBorder()}\n                className=\"radio\"\n                size={15}\n                marginRight={8} />\n            <span>{team}</span>\n        </StyledRadio>\n    )\n}\n\ninterface TeamRadiosProperty {\n    roomName: string;\n    userID: string;\n}\n\nconst TeamRadios = (props: TeamRadiosProperty) => {\n    const { roomName, userID } = props;\n    const userTeam = useRecoilValue(userTeamState);\n    const team = ['草莓糕', '可麗露'] as ['草莓糕', '可麗露'];\n\n    const handleChooseTeam = (team: Team) => {\n        const roomRef = db.database().ref(`/${roomName}`);\n        const userInfo = roomRef.child('playersInfo').child(`${userID}`);\n        userInfo.update({ team });\n    };\n\n    return (\n        <RadioArea className=\"choose_team\">\n            <div className=\"options\">\n                {team.map((team, index) => {\n                    const teamIndex = `team${index + 1}` as Team;\n                    return (\n                        <TeamOption\n                            onClick={() => handleChooseTeam(teamIndex)}\n                            isChosen={userTeam === teamIndex}\n                            key={index}\n                            team={team}\n                            teamIndex={teamIndex}\n                        />\n                    )\n                })}\n            </div >\n        </RadioArea >\n    )\n}\n\nexport default TeamRadios","const generateArray = (number: number) => {\n    if(!number) return [];\n    return Array.from(Array(number), (_, x) => x);\n}\n\nexport default generateArray;","import React, { useEffect, useState } from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport { useRecoilState } from \"recoil\";\nimport Modal from \"components/Global/Modal\";\nimport Button from 'components/Global/Button';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\nimport { ThemeData } from 'types/theme';\nimport generateArray from 'util/generateArray';\n\nconst themeData: ThemeData = {\n    light: {\n        bg: 'white',\n        border: 'none',\n        fg: color.$title_font_color,\n        dot: color.$pink_color,\n        button_color: color.$green_color\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        border: '1px solid' + color.$dark_border_color,\n        fg: color.$dark_default_font_color,\n        dot: color.$fluorescent_pink_color,\n        button_color: color.$dark_border_color\n    },\n}\n\n\nconst LoadingModal = styled.div`\n    width: 50vw;\n    min-height: 50vw;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    border-radius: 10px;\n    padding: 20px;\n    background-color: ${({ theme }) => theme.bg};\n    border: ${({ theme }) => theme.border};\n\n    .text,\n    .countdown {\n        margin: 0;\n        font-size: 15px;\n        letter-spacing: 1px;\n        color: ${({ theme }) => theme.fg};\n    }\n\n    .text {\n        margin: 12px 0;\n    }\n\n    .lds-default {\n        display: inline-block;\n        position: relative;\n        width: 80px;\n        height: 80px;\n\n        &>div {\n            position: absolute;\n            width: 6px;\n            height: 6px;\n            border-radius: 50%;\n            animation: lds-default 1.3s linear infinite;\n            background: ${({ theme }) => theme.dot};\n\n            &:nth-child(1) {\n                animation-delay: 0s;\n                top: 37px;\n                left: 66px;\n            }\n\n            &:nth-child(2) {\n                animation-delay: -0.1s;\n                top: 22px;\n                left: 62px;\n            }\n\n            &:nth-child(3) {\n                animation-delay: -0.3s;\n                top: 11px;\n                left: 52px;\n            }\n\n            &:nth-child(4) {\n                animation-delay: -0.3s;\n                top: 7px;\n                left: 37px;\n            }\n\n            &:nth-child(5) {\n                animation-delay: -0.4s;\n                top: 11px;\n                left: 22px;\n            }\n\n            &:nth-child(6) {\n                animation-delay: -0.3s;\n                top: 22px;\n                left: 11px;\n            }\n\n            &:nth-child(7) {\n                animation-delay: -0.6s;\n                top: 37px;\n                left: 7px;\n            }\n\n            &:nth-child(8) {\n                animation-delay: -0.7s;\n                top: 52px;\n                left: 11px;\n            }\n\n            &:nth-child(9) {\n                animation-delay: -0.8s;\n                top: 62px;\n                left: 22px;\n            }\n\n            &:nth-child(10) {\n                animation-delay: -0.9s;\n                top: 66px;\n                left: 37px;\n            }\n\n            &:nth-child(11) {\n                animation-delay: -1s;\n                top: 62px;\n                left: 52px;\n            }\n\n            &:nth-child(12) {\n                animation-delay: -1.1s;\n                top: 52px;\n                left: 62px;\n            }\n        }\n    }\n\n    @keyframes lds-default {\n        0%,\n        20%,\n        80%,\n        100% {\n            transform: scale(1);\n        }\n\n        50% {\n            transform: scale(1.5);\n        }\n    }\n`\ninterface LoadingProperty {\n    active: Boolean;\n    type?: string | null;\n    cancelReady?: ()=>void;\n    actionText?: string;\n    countdown?: number;\n    noOpacity?: Boolean;\n    action?: ()=>void;\n    text?: string;\n    className?: string;\n}\n\nconst Loading = (props: LoadingProperty) => {\n    const {\n        active,\n        type = 'ready',\n        text = '等待其他玩家開始',\n        actionText,\n        countdown = 0,\n        noOpacity = false,\n        action = () => {},\n        cancelReady = () => {},\n    } = props;\n\n    const [theme] = useRecoilState(themeState);\n    const [timeLeft, setTimeLeft] = useState(countdown);\n    const dots = generateArray(12);\n\n    useEffect(() => {\n        if(!active) return;\n\n        if (!timeLeft) {\n            action();\n            return;\n        };\n\n        const countdownInterval = setInterval(() => {\n            setTimeLeft(timeLeft - 1);\n        }, 1000);\n\n        return () => clearInterval(countdownInterval);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeLeft, active])\n\n    return (\n        <Modal \n            active={active}\n            className={classnames('loading-modal',{\n                'no-opacity': noOpacity,\n            })}\n        >\n            <LoadingModal\n                theme={themeData[theme]}\n                className=\"loading\">\n                <div className=\"lds-default\">\n                    {dots.map((dot)=>(<div key={`dot${dot}`}></div>))}\n                </div>\n                <p className=\"text\">{text}</p>\n                {type && type.includes('countdown') &&\n                    <p className=\"countdown\">{timeLeft} 秒後{actionText}</p>\n                }\n                {type === 'ready' &&\n                    <Button\n                        color={themeData[theme].button_color}\n                        onClick={cancelReady}\n                        className=\"cancel_ready\"\n                    >取消</Button>\n                }\n            </LoadingModal>\n        </Modal>\n    )\n};\n\nexport default Loading;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect, useState } from 'react';\nimport db from \"database\";\nimport { useHistory } from \"react-router-dom\";\nimport { color } from 'style/theme'\nimport styled from 'styled-components';\n\nimport { playersData, teamArray } from \"store/players\";\nimport { userReadyState, userIDState, userRoomState, userTeamState, userNameState } from \"store/user\";\nimport { themeState } from 'store/theme';\nimport { useRecoilValue, useSetRecoilState, useRecoilState } from \"recoil\";\n\nimport { TeamTypes, PlayerData } from 'types/player';\n\nimport PlayerWindow from 'components/WaitRoom/PlayerWindow';\nimport TeamRadios from 'components/WaitRoom/TeamRadios';\nimport Button from 'components/Global/Button';\nimport Loading from 'components/Global/Loading';\nimport ThemeToggler from 'components/Global/ThemeToggler';\n\nconst themeData = {\n    light: {\n        bg: color.$theme_background,\n    },\n    dark: {\n        bg: color.$dark_bg_color,\n    },\n}\n\nconst Room = styled.div`\n        padding: 5vw;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        transition: .3s background-color;\n        background-color: ${({ theme }) => theme.bg};\n\n        .start_game {\n            letter-spacing: 2px;\n            font-size: 20px;\n            margin-top: 30px;\n        }\n`\ninterface ReadyButtonProperty {\n    className: string;\n    buttonMessage: string;\n    onClick: () => void;\n}\nconst ReadyButton = (props: ReadyButtonProperty) => {\n    const { onClick, className, buttonMessage } = props;\n    const [theme] = useRecoilState(themeState);\n\n    const getButtonColor = () => {\n        switch (theme) {\n            case 'light':\n            default:\n                return buttonMessage === '開打！'\n                    ? `${color.$pink_color}`\n                    : `${color.$unable_color}`;\n            case 'dark':\n                return buttonMessage === '開打！'\n                    ? `${color.$fluorescent_pink_color}`\n                    : `${color.$dark_dim_border_color}`;\n        }\n    }\n\n    return (\n        <Button\n            className={className}\n            onClick={onClick}\n            color={getButtonColor()}\n        >\n            {buttonMessage}\n        </Button>\n    )\n}\n\nconst WaitRoom = () => {\n    const history = useHistory();\n    const [theme] = useRecoilState(themeState);\n    const [buttonMessage, setButtonMessage] = useState('');\n    const setPlayerData = useSetRecoilState(playersData);\n    const userID = useRecoilValue(userIDState);\n    const userName = useRecoilValue(userNameState);\n    const userTeam = useRecoilValue(userTeamState);\n    const roomName = useRecoilValue(userRoomState);\n    const team = useRecoilValue(teamArray);\n    const isUserReady = useRecoilValue(userReadyState);\n    const roomRef = db.database().ref(`/${roomName}`);\n    const playersInfo = roomRef.child('playersInfo');\n    const isAllReady = roomRef.child('enterGame');\n\n    useEffect(() => {\n        const prepareWaitRoom = async () => {\n            await initWaitRoomData();\n            detectUserDisConnect();\n            await playersInfo.once(\"value\", (data) => {\n                const playersData = Object.values(data.val()) as PlayerData[];\n                const sortedByTimestamp = playersData.sort((a, b) => a.timestamp - b.timestamp);\n                const userOrder = sortedByTimestamp.findIndex(data => data.userID === userID);\n                const userDefaultTeam = userOrder === 0 || userOrder === 3\n                    ? TeamTypes.TeamOne\n                    : TeamTypes.TeamTwo;\n                if (!userTeam) {\n                    playersInfo.child(userID).update({ team: userDefaultTeam })\n                }\n            });\n\n            playersInfo.on(\"value\", async (data) => {\n                if (!data.val()) return;\n                const playersData = Object.values(data.val()) as PlayerData[];\n                const sortedByTimestamp = playersData.sort((a, b) => a.timestamp - b.timestamp);\n                setPlayerData(sortedByTimestamp);\n            });\n\n            // 監聽四人都ready時進入遊戲\n            isAllReady.on(\"value\", async data => {\n                if (data.val()) {\n                    await enterGame();\n                    isAllReady.remove();\n                }\n            });\n        }\n\n        prepareWaitRoom();\n\n        return () => {\n            playersInfo.off();\n            roomRef\n                .child('playersInfo')\n                .child(userID)\n                .onDisconnect()\n                .cancel();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (team.length < 4) {\n            return setButtonMessage('人數不足⋯⋯');;\n        };\n        const teamOneAmount = team.filter(team => team === TeamTypes.TeamOne).length;\n        const teamTwoAmount = team.filter(team => team === TeamTypes.TeamTwo).length;\n        if (teamOneAmount !== teamTwoAmount) {\n            return setButtonMessage('人數不一樣怎麼打！');\n        }\n        return setButtonMessage('開打！');\n    }, [team])\n\n    const detectUserDisConnect = () => {\n        roomRef\n            .child('playersInfo')\n            .child(userID)\n            .onDisconnect()\n            .remove();\n    };\n\n    const initWaitRoomData = async () => {\n        const playersInfo = roomRef.child('playersInfo');\n        await playersInfo.child(userID).update({ ready: false })\n    }\n\n    const enterGame = async () => {\n        await initWaitRoomData();\n        history.push(`/${roomName}/game_room/${userID}`);\n    }\n\n    const setReady = async (isReady: boolean) => {\n        if (buttonMessage !== '開打！') return;\n        const roomRef = db.database().ref(`/${roomName}`);\n        const userInfo = roomRef.child('playersInfo').child(userID);\n        await userInfo.update({ ready: isReady });\n        if (isReady) {\n            await roomRef.child('playersInfo').once(\"value\", async (data) => {\n                const playersData = Object.values(data.val()) as PlayerData[];\n                const allReady = playersData.filter(data => data.ready).length === 4;\n                if (allReady) {\n                    await roomRef.child('currentPlayer').set(userName);\n                    await roomRef.child('enterGame').set(true);\n                    roomRef.child('playersInfo').off();\n                }\n            })\n        }\n    }\n\n    return (\n        <Room\n            theme={themeData[theme]}>\n            <ThemeToggler className=\"on_page\" />\n            <PlayerWindow />\n            <TeamRadios roomName={roomName} userID={userID} />\n            <ReadyButton\n                className=\"start_game\"\n                buttonMessage={buttonMessage}\n                onClick={() => setReady(true)}\n            />\n            <Loading\n                active={isUserReady}\n                cancelReady={() => setReady(false)}\n            />\n        </Room>\n    )\n}\n\nexport default WaitRoom;","import { CardSuitType, Card} from 'types/card';\nconst buildNewDeck = () => {\n    const suit = [CardSuitType.Spade, CardSuitType.Heart, CardSuitType.Diamond, CardSuitType.Club];\n    const number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\n    const deck: Card[] = [];\n    for (let i = 0; i < suit.length; i++) {\n        let card: Card;\n        for (let j = 0; j < number.length; j++) {\n            card = {\n                suit: suit[i],\n                number: number[j],\n            };\n            deck.push(card);\n        }\n    }\n    return deck;\n};\n\nconst shuffle = (deck: Card[]) => {\n    let i = deck.length;\n    while (i > 1) {\n        let index = Math.floor(Math.random() * i--);\n        [deck[i], deck[index]] = [deck[index], deck[i]];\n    }\n    return deck;\n};\n\nconst sortCards = (cards: Card[]) => {\n    const sorted = cards.sort((a: Card, b: Card) => {\n        const order = [CardSuitType.Spade, CardSuitType.Heart, CardSuitType.Club, CardSuitType.Diamond];\n        const cardAPoint = 100 * (4 - order.indexOf(a.suit)) + 13 - a.number;\n        const cardBPoint = 100 * (4 - order.indexOf(b.suit)) + 13 - b.number;\n        return cardBPoint - cardAPoint;\n    });\n    return sorted;\n};\n\nconst dealCards = (playerAmount: number, deck: Card[]) => {\n    const players: Array<Card[]> = [];\n    for (let i = 0; i < playerAmount; i++) {\n        const eachPlayer: [] = [];\n        players.push(eachPlayer);\n    }\n\n    for (let i = 0; i < deck.length; i++) {\n        const playerIndex = i % playerAmount;\n        players[playerIndex].push(deck[i]);\n    }\n    const sorted = players.map((cards) => sortCards(cards));\n    return sorted;\n};\n\nconst shuffledDeck = () => shuffle(buildNewDeck());\n\nexport const generateNewDeck = () => {\n    return dealCards(4, shuffledDeck());\n};\n","import { CardSuitType, Suits, SuitColorType } from 'types/card';\nexport const suitColor = (suit: Suits | undefined) => {\n    switch (suit) {\n        case CardSuitType.Spade:\n        case CardSuitType.Club:\n        default:\n            return SuitColorType.Black;\n        case CardSuitType.Heart:\n        case CardSuitType.Diamond:\n            return SuitColorType.Red;\n    }\n}\n\nexport const suitInPoker = (suit: Suits | undefined) => {\n    switch (suit) {\n        case CardSuitType.Spade:\n            return \"♠\";\n        case CardSuitType.Heart:\n            return \"♥\";\n        case CardSuitType.Diamond:\n            return \"♦\";\n        case CardSuitType.Club:\n        default:\n            return \"♣\";\n    }\n}","import React from 'react';\nimport styled from 'styled-components';\nimport { color } from 'style/theme';\n\nconst Icon = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    background-color: #fff;\n    border-radius: 3px;\n    padding: 8px;\n    filter: drop-shadow(0px 0px 2px rgb(170, 170, 170));\n    z-index: 1;\n    &::after {\n        content: \"\";\n        position: absolute;\n        display: block;\n        background-color: #fff;\n        width: 6px;\n        height: 6px;\n        transform-origin: top right;\n        transform: rotate(45deg);\n        top: 100%;\n    }\n    &.on_table {\n        position: absolute;\n        transform: translate(-50%, -150%);\n        left: 50%;\n        top: 0;\n    }\n    &.on_bind_list {\n        position: absolute;\n        transform: translate(-50%);\n        left: 50%;\n        bottom: 99%;\n        z-index: 500;\n    }\n\n    .dots {\n        display: flex;\n\n        .dot {\n            height: 4px;\n            width: 4px;\n            border-radius: 50%;\n            background-color: ${color.$black_suit_color};\n\n            animation: animateDot 2s cubic-bezier(0.69, 0.76, 0.58, 1);\n            animation-iteration-count: infinite;\n\n            &:nth-child(1) {\n                animation-delay: 0s;\n            }\n\n            &:nth-child(2) {\n                margin: 0 4px;\n                animation-delay: 0.3s;\n            }\n\n            &:nth-child(3) {\n                animation-delay: 0.3s;\n            }\n        }\n    }\n\n    @keyframes animateDot {\n        0% {\n            transform: translate3d(0);\n        }\n\n        25% {\n            transform: translate3d(0, -1.5px, 0);\n        }\n\n        50% {\n            transform: translate3d(0, 0.5px, 0);\n        }\n\n        65%,\n        100% {\n            transform: translate3d(0, 0, 0);\n        }\n    }\n`\ninterface ThinkingIconProperty {\n    className: string;\n}\n\nconst ThinkingIcon = (props: ThinkingIconProperty) => {\n    const { className } = props;\n    return (\n        <Icon className={`thinking ${className}`}>\n            <div className=\"dots\">\n                <div className=\"dot\"></div>\n                <div className=\"dot\"></div>\n                <div className=\"dot\"></div>\n            </div>\n        </Icon>\n    )\n};\n\nexport default ThinkingIcon","import React, { useEffect } from 'react';\nimport classnames from 'classnames';\nimport db from \"database\";\nimport styled from 'styled-components';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\nimport { suitInPoker, suitColor } from 'util/suit';\nimport { OrderedStartFromTeamOne } from 'store/players';\nimport { currentPlayerName } from 'store/game';\nimport { playersCalledListState } from 'store/bind';\nimport { userRoomState } from 'store/user';\nimport ThinkingIcon from 'components/GameRoom/ThinkingIcon';\nimport { TeamTypes } from 'types/player';\nimport { CalledBind } from 'types/bind';\nimport { ThemeTypes } from 'types/theme';\nimport { CardSuitType } from 'types/card';\n\nconst themeData = {\n    light: {\n        t1_name_fg: 'white',\n        t2_name_fg: 'white',\n        t1_name_bg: color.$pink_color,\n        t2_name_bg: color.$brown_color,\n        binds_bg: 'white',\n        border: 'none',\n        red_suit_color: color.$red_suit_color,\n        black_suit_color: color.$black_suit_color,\n        pass_color: color.$pass_color\n    },\n    dark: {\n        t1_name_fg: color.$fluorescent_pink_color,\n        t2_name_fg: color.$fluorescent_yellow_color,\n        t1_name_bg: color.$dark_dim_bg_color,\n        t2_name_bg: color.$dark_dim_bg_color,\n        binds_bg: color.$dark_dim_bg_color,\n        border: \"1px solid\" + color.$dark_dim_border_color,\n        red_suit_color: color.$dark_red_suit_color,\n        black_suit_color: 'white',\n        pass_color: color.$fluorescent_green_color\n    },\n}\n\ninterface getUserTurnEffectProperty {\n    team: TeamTypes;\n    theme: ThemeTypes;\n}\n\nconst getUserTurnEffect = (props: getUserTurnEffectProperty) => {\n    const { theme, team } = props\n    switch (theme) {\n        case 'light':\n        default:\n            return `box-shadow: 0px 0px 0px 2px ${color.$highlight_color};`\n        case 'dark':\n            const teamColor = team === TeamTypes.TeamOne\n                ? color.$fluorescent_pink_color\n                : color.$fluorescent_yellow_color\n            return `\n            border: none;\n            box-shadow: 0 0 2px 1px ${teamColor};\n            `\n    }\n}\n\ninterface PlayIProperty {\n    team: TeamTypes;\n}\n\nconst Player = styled.div<PlayIProperty>`\n    position: relative;\n    flex:  0 1 25%;\n    font-size: 13px;\n    border-radius: 4px;\n    background-color: ${({ theme }) => theme.binds_bg};\n    border: ${({ theme }) => theme.border};\n\n    &.is_player_turn {\n        ${({ theme, team }) => getUserTurnEffect({ theme, team })};\n    }\n\n    & + div {\n        margin-left: 6px;\n    }\n\n    .name {\n        position: relative;\n        border-radius: 4px 4px 0 0;\n        max-width: calc(85vw/4 - 38px/4);\n        text-align: center;\n        line-height: 20px;\n        padding: 6px;\n        box-sizing: border-box;\n        letter-spacing: 1px;\n        transition: 0.3s all;\n        border-bottom: ${({ theme }) => theme.border};\n\n        &  > p {\n            overflow: hidden;\n            white-space: nowrap;\n        }\n    }\n\n    &:nth-child(2n+1) {\n        .name {\n            background-color: ${({ theme }) => theme.t1_name_bg};\n            color: ${({ theme }) => theme.t1_name_fg};\n        }   \n    }\n\n    &:nth-child(2n+2) {\n        .name {\n            background-color: ${({ theme }) => theme.t2_name_bg};\n            color: ${({ theme }) => theme.t2_name_fg};\n        }   \n    }\n\n\n    .called_bind {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 5px;\n        box-sizing: border-box;\n        min-height: 8vh;\n        .bind {\n            & + .bind {\n                margin-top: 3px;\n            }\n            &.red {\n                color: ${({ theme }) => theme.red_suit_color};\n            }\n            &.black {\n                color: ${({ theme }) => theme.black_suit_color};\n            }\n            &.pass {\n                letter-spacing: 1px;\n                color: ${({ theme }) => theme.pass_color};\n            }\n        }\n    }\n`\n\ninterface PlayInfoProperty {\n    name: string;\n    team: TeamTypes;\n    calledList: CalledBind[];\n}\nconst PlayInfo = (props: PlayInfoProperty) => {\n    const { name, team, calledList } = props;\n    const [theme] = useRecoilState(themeState);\n    const nowPlayer = useRecoilValue(currentPlayerName);\n    const isPlayerTurn = nowPlayer === name;\n\n    return (\n        <Player\n            theme={themeData[theme]}\n            team={team}\n            className={classnames(\"player\", { is_player_turn: isPlayerTurn })}\n        >\n            {isPlayerTurn && <ThinkingIcon className=\"on_bind_list\" />}\n            <div className=\"name\">\n                <p>{name}</p>\n            </div>\n            <div className=\"called_bind\">\n                {calledList.map((called, index) => {\n                    const isPassed = called === 'pass';\n                    const bind = called === 'pass' ? {number: 0, suit: CardSuitType.Club} : called;\n                    if (isPassed) {\n                        return (<span key={'pass' + index} className={classnames(\"bind\", \"pass\")}>PASS</span>)\n                    }\n                    return (\n                        <span \n                            key={'called' + index} \n                            className={classnames(\"bind\", suitColor(bind.suit))}\n                        >\n                            {bind.number} {suitInPoker(bind.suit)}\n                        </span>\n                    )\n                })\n                }\n            </div>\n        </Player>\n    )\n};\n\ninterface PlayerListProperty {\n    className: string;\n}\nconst PlayerList = (props: PlayerListProperty) => {\n    const { className } = props;\n    const playerList = useRecoilValue(OrderedStartFromTeamOne);\n    const roomName = useRecoilValue(userRoomState);\n    const [calledList, setCalledList] = useRecoilState(playersCalledListState);\n\n    useEffect(() => {\n        const calledBindsRef = db.database().ref(`/${roomName}`).child('gameInfo').child('calledBinds');\n        calledBindsRef.on(\"value\", (data) => {\n            const allCalledBinds = data.val();\n            setCalledList(allCalledBinds || {});\n        })\n        return () => {\n            calledBindsRef.off();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    return (\n        <div className={className}>\n            {playerList.map((player, index) => {\n                const team = 'team' + (index % 2) + 1 as TeamTypes;\n                return(\n                <PlayInfo\n                    key={player + index}\n                    name={player}\n                    team={team}\n                    calledList={calledList[player] || []} />\n            )})}\n        </div>\n    )\n}\n\nexport default PlayerList;","type Object = { [key: string]: any };\n\nconst isObjectEquivalent = (a: Object | null, b: Object | null) => {\n    if(!a || !b) return false;\n    const aKeys = Object.keys(a);\n    const bKeys = Object.keys(b);\n    if (aKeys.length !== bKeys.length) return false;\n\n    return aKeys.every(key => {\n        return a[key] === b[key]\n    })\n}\n\nexport default isObjectEquivalent","import React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { ThemeTypes } from 'types/theme';\nimport { color } from 'style/theme';\nimport { suitInPoker, suitColor } from 'util/suit';\nimport Radio from 'components/Global/Radio';\nimport { CardSuitType } from 'types/card';\n\nconst themeData = {\n    light: {\n        red_suit_color: color.$red_suit_color,\n        black_suit_color: color.$black_suit_color,\n        unable_color: color.$unable_color,\n    },\n    dark: {\n        red_suit_color: color.$dark_red_suit_color,\n        black_suit_color: 'white',\n        unable_color: color.$dark_unable_color\n    },\n}\n\nconst Button = styled.div`\n    display: flex;\n    align-items: center;\n\n    .pattern {\n        font-size: 16px;\n        line-height: 16px;\n\n        &.red {\n            color: ${({ theme }) => theme.red_suit_color};\n        }\n\n        &.black {\n            color: ${({ theme }) => theme.black_suit_color};\n        }\n    }\n\n    &.is_unable {\n        .pattern {\n            color: ${({ theme }) => theme.unable_color};\n        }\n    }\n\n    &.chosen {\n        .radio {\n            &::after {\n                background-color: #dcdcdc;\n            }\n        }\n    }\n`\n\ninterface OptionButtonProperty {\n    isUnableBind: boolean;\n    trickNumber: number;\n    suit: CardSuitType;\n    onClick: () => void;\n    isPicked: boolean;\n}\n\nconst OptionButton = (props: OptionButtonProperty) => {\n    const {\n        isUnableBind,\n        trickNumber,\n        suit,\n        onClick = () => { },\n        isPicked\n    } = props;\n    const [theme] = useRecoilState(themeState);\n    const getBorder = () => {\n        switch (theme) {\n            case ThemeTypes.Light:\n            default:\n                return `1px solid ${color.$under_line_color}`;\n            case ThemeTypes.Dark:\n                return `1px solid ${color.$dark_dim_border_color}`;\n        }\n    }\n    return (\n        <Button\n            theme={themeData[theme]}\n            key={trickNumber + suit}\n            className={classnames(\"option\", { \"chosen\": isPicked, \"is_unable\": isUnableBind })}\n            onClick={onClick}>\n            <Radio\n                className=\"radio\"\n                border={getBorder()}\n                size={12}\n                marginRight={5}\n            />\n            <span\n                className={classnames(\"pattern\", suitColor(suit))}\n            >{suitInPoker(suit)}&#xFE0E;</span>\n        </Button>\n    )\n}\n\nexport default OptionButton;","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { color } from 'style/theme';\nimport { ThemeTypes } from 'types/theme';\nimport { userPickBindState, nowBindState  } from 'store/bind';\nimport isObjectEquivalent from 'util/isObjectEquivalent';\nimport OptionButton from './OptionButton';\nimport { Card, CardSuitType } from 'types/card';\n\nconst themeData = {\n    light: { \n        number_c: color.$default_font_color,\n        border: color.$under_line_color\n    },\n    dark: {\n        number_c: 'white',\n        border: color.$dark_dim_border_color\n    },\n}\n\nconst OptionRow = styled.div`\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n\n    &:not(:last-child) {\n        transition: 0.3s all;\n        border-bottom: 1px solid ${({theme}) => theme.border };\n    }\n\n    .number {\n        flex: 0 1 25%;\n        margin-right: 15px;\n        transition: 0.3s all;\n        color: ${({theme}) => theme.number_c };\n    }\n    .suits {\n        display: flex;\n        justify-content: space-between;\n        flex: 1 0 auto;\n    }\n`\n\ninterface OptionsProperty  {\n    trickNumber: number;\n    isUserTurn: boolean;\n    theme: ThemeTypes;\n}\n\nconst Options = (props: OptionsProperty) => {\n    const { trickNumber, isUserTurn, theme } = props;\n    const suits = [CardSuitType.Club, CardSuitType.Diamond, CardSuitType.Heart, CardSuitType.Spade];\n    const [pickBindState,setPickBindState] = useRecoilState(userPickBindState);\n    const nowBind = useRecoilValue(nowBindState);\n\n    const isUnableBind = (card: Card) => {\n        const {suit, number} = card;\n        if(nowBind.number > number) return true;\n        if(nowBind.number === number) {\n            return !(suits.indexOf(suit) > suits.indexOf(nowBind.suit))\n        }\n        return false;\n    }\n\n    const handlePickBind = (bindData: Card) => {\n        if(!isUserTurn) return;\n        if(isUnableBind(bindData)) return;\n        if(isObjectEquivalent(bindData, pickBindState as Card)){\n            setPickBindState(null);\n        } else {\n            setPickBindState(bindData);\n        }\n    }\n\n    return (\n        <OptionRow \n            theme={themeData[theme]}\n            className=\"option_row\">\n            <span className=\"number\">{trickNumber}</span>\n            <div className=\"suits\">\n                {suits.map((suit)=>{\n                    const called = {suit, number: trickNumber} as Card;\n                    return(\n                    <OptionButton \n                        key={trickNumber+suit}\n                        onClick={()=>handlePickBind(called)}\n                        trickNumber={trickNumber}\n                        isUnableBind={isUnableBind(called)}\n                        isPicked={isObjectEquivalent(called,pickBindState as Card)}\n                        suit={suit}\n                    />\n                )})}\n            </div>\n        </OptionRow>\n    )\n}\n\nconst List = styled.div`\n    max-height: 25vh;\n    padding: 0 10px;\n    overflow-y: scroll;\n`\n\ninterface OptionListProperty  {\n    tricks: number[];\n    isUserTurn: boolean;\n    theme: ThemeTypes;\n}\n\nconst OptionList = (props: OptionListProperty) => {\n    const { tricks = [], isUserTurn, theme }  = props;\n    \n    return (\n    <List \n        theme={themeData[theme]}\n        className=\"bind_options\">\n        {tricks.map(trickNumber => (\n            <Options         \n                theme={theme}\n                key={'trick'+trickNumber}\n                trickNumber={trickNumber}\n                isUserTurn={isUserTurn}\n            />\n        ))}\n    </List>\n)};\n\nexport default OptionList;","import React, { useEffect, useMemo } from 'react';\nimport db from \"database\";\nimport classnames from 'classnames';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { color } from 'style/theme';\nimport { suitInPoker } from 'util/suit';\nimport OptionList from './OptionList';\nimport { ThemeTypes } from 'types/theme';\nimport { CalledBind } from 'types/bind';\nimport { userPickBindState, nowBindState, availibleTricksState, userPassState } from 'store/bind';\nimport { isUserTurnState, trumpState } from 'store/game';\nimport { relationWithUser, OrderedStartFromTeamOne } from 'store/players';\nimport { userNameState, userRoomState } from 'store/user';\n\ninterface BoxProperty {\n    themeType: ThemeTypes;\n}\n\nconst Box = styled.div<BoxProperty>`\n    border-radius: 4px;\n    margin-top: 8px;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    transition: 0.3s all;\n    background-color: ${({ theme }) => theme.bg};\n    border-width: ${({ themeType }) => themeType === ThemeTypes.Light ? 0 : '1px'};\n    border-style: solid;\n    border-color: ${({ theme }) => theme.border};\n\n    & > p {\n        padding: 8px 0;\n        font-size: 16px;\n        text-align: center;\n        letter-spacing: 1px;\n        margin-bottom: 5px;\n        transition: 0.3s all;\n        border-bottom: 1px solid ${({ theme }) => theme.border};\n        background-color: ${({ theme }) => theme.status_unable_bg};\n        color: ${({ theme }) => theme.status_unable_fg};\n    }\n\n    & > button {\n        padding: 8px 0;\n        margin-top: 5px;\n        font-size: 16px;\n        line-height: 16px;\n        letter-spacing: 2px;\n        transition: 0.3s all;\n        border-top: 1px solid ${({ theme }) => theme.border};\n        background-color: ${({ theme }) => theme.call_unable_bg};\n        color: ${({ theme }) => theme.call_unable_fg};\n    }\n\n    &.is_user_turn{\n        & > p {\n            background-color: ${({ theme }) => theme.status_active_bg};\n            color: ${({ theme }) => theme.status_active_fg};\n        }\n        & > button {\n            background-color: ${({ theme }) => theme.call_pass_bg};\n            color: ${({ theme }) => theme.call_pass_fg};;\n\n            &.has_pick_bind {\n                background-color: ${({ theme }) => theme.call_active_bg};\n                color: ${({ theme }) => theme.call_active_fg};\n            }\n        }\n    }\n`\n\nconst Hint = styled.p`\n    text-align: center;\n    margin-top: 4px;\n    letter-spacing: 1px;\n    font-size: 12px;\n    transition: 0.3s all;\n    color: ${({ theme }) => theme.hint};\n`\n\nconst themeData = {\n    light: {\n        bg: 'white',\n        status_unable_bg: color.$unable_color,\n        status_active_bg: color.$highlight_color,\n        status_unable_fg: color.$unable_font_color,\n        status_active_fg: color.$title_font_color,\n        call_unable_bg: color.$unable_color,\n        call_unable_fg: color.$unable_font_color,\n        call_pass_bg: color.$pass_color,\n        call_pass_fg: 'white',\n        call_active_bg: color.$pink_color,\n        call_active_fg: 'white',\n        border: 'transparent',\n        hint: color.$default_font_color,\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        status_unable_bg: color.$dark_dim_bg_color,\n        status_unable_fg: color.$unable_font_color,\n        status_active_bg: color.$dark_dim_bg_color,\n        status_active_fg: color.$fluorescent_yellow_color,\n        call_unable_bg: color.$dark_dim_bg_color,\n        call_unable_fg: '#7B7B7B',\n        call_pass_bg: color.$dark_dim_bg_color,\n        call_pass_fg: color.$fluorescent_green_color,\n        call_active_bg: color.$dark_dim_bg_color,\n        call_active_fg: color.$fluorescent_pink_color,\n        border: color.$dark_dim_border_color,\n        hint: 'white',\n    },\n}\n\ninterface BindListProperty  {\n    theme: ThemeTypes;\n}\n\nconst BindList = (props: BindListProperty) => {\n    const { theme } = props;\n    const [userPickBind, setUserPickBind] = useRecoilState(userPickBindState);\n    const [isUserPass, setUserPass] = useRecoilState(userPassState);\n    const [nowBind, setNowBind] = useRecoilState(nowBindState);\n    const playerList = useRecoilValue(OrderedStartFromTeamOne);\n    const [trump, setTrump] = useRecoilState(trumpState);\n    const { nextPlayer } = useRecoilValue(relationWithUser);\n    const availibleTricks = useRecoilValue(availibleTricksState);\n    const isUserTurn = useRecoilValue(isUserTurnState);\n    const roomName = useRecoilValue(userRoomState);\n    const userName = useRecoilValue(userNameState);\n    const roomRef = db.database().ref(`/${roomName}`);\n\n    useEffect(() => {\n        const nowBindRef = roomRef.child('gameInfo').child('nowBind');\n        nowBindRef.on(\"value\", (data) => {\n            const nowBindData = data.val();\n            if (nowBindData) {\n                setNowBind(nowBindData);\n            }\n        });\n        detectTrumpDecided();\n        return () => {\n            nowBindRef.off();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);\n\n    useEffect(() => {\n        if (isUserTurn && isUserPass && !trump) {\n            roomRef.child('currentPlayer').set(nextPlayer);\n        }\n    }, [isUserTurn, isUserPass, nextPlayer, roomRef, trump]);\n\n    const buttonMessage = useMemo(() => {\n        const noBind = nowBind.number === 0;\n        if (isUserTurn) {\n            if (noBind && !userPickBind) return '不能PASS!';\n            if (userPickBind) {\n                return '喊 ' + userPickBind.number + suitInPoker(userPickBind.suit);\n            } else {\n                return 'PASS';\n            }\n        } else {\n            return 'PASS';\n        }\n    }, [isUserTurn, userPickBind, nowBind])\n\n    const callBind = async () => {\n        if (!isUserTurn || buttonMessage === '不能PASS!') return;\n        const bindRef = roomRef.child('gameInfo').child('nowBind');\n        const userBindListRef = roomRef.child('gameInfo').child('calledBinds').child(userName);\n        const nextPlayerRef = roomRef.child('currentPlayer');\n\n        await userBindListRef.once(\"value\", (data) => {\n            const userCalledBinds = data.val();\n            const calledBind = userPickBind || 'pass';\n            if (!userCalledBinds) {\n                userBindListRef.set([calledBind]);\n            } else {\n                const newUserBinds = [...userCalledBinds, calledBind];\n                userBindListRef.set(newUserBinds);\n            }\n\n            if (userPickBind) {\n                bindRef.set({ ...userPickBind , player: userName });\n            } else {\n                setUserPass(true);\n            }\n        });\n\n        await nextPlayerRef.set(nextPlayer);\n        setUserPickBind(null);\n    };\n\n    const detectTrumpDecided = () => {\n        const bindListRef = roomRef.child('gameInfo').child('calledBinds');\n        const nextPlayerRef = roomRef.child('currentPlayer');\n        bindListRef.on(\"value\", (data) => {\n            const binds = data.val();\n            if(!binds) return;\n            const playersCalledList =  Object.values(binds) as CalledBind[][]\n            const passAmount = playersCalledList\n                .filter(playerCalledList => {\n                    return playerCalledList.some(bind => bind === 'pass');\n                }).length;\n\n            if(passAmount === 3) {\n                const nowBindRef = roomRef.child('gameInfo').child('nowBind');\n                nowBindRef.once(\"value\", (data) => {\n                    const { suit, number, player } = data.val();\n                    setTrump({suit, number});\n                    nextPlayerRef.set(getNextPlayer(player));\n                });\n                bindListRef.off();\n            }\n        });\n    }\n\n    const getNextPlayer = (playerName: string) => {\n        const playerIndex = playerList.indexOf(playerName);\n        const nextPlayerIndex = playerIndex + 1 > 3 ? playerIndex - 3 : playerIndex + 1;\n        return playerList[nextPlayerIndex];\n    }\n\n    return (\n        <>\n            <Box\n                theme={themeData[theme]}\n                themeType={theme}\n                className={classnames(\"bind_list\", { \"is_user_turn\": isUserTurn })}>\n                <p>{isUserTurn ? '' : 'NOT '}YOUR TURN</p>\n                <OptionList\n                    theme={theme}\n                    isUserTurn={isUserTurn}\n                    tricks={availibleTricks} />\n                <button\n                    onClick={callBind}\n                    className={classnames({ \"has_pick_bind\": userPickBind })}>{buttonMessage}\n                </button>\n            </Box>\n            { userPickBind && <Hint theme={themeData[theme]}>再次點擊相同選項可以取消選擇</Hint>}\n        </>\n    )\n}\n\nexport default BindList;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { color } from 'style/theme';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\n\nimport Modal from 'components/Global/Modal';\nimport PlayerList from './PlayerList'\nimport BindList from './BindList'\n\n\nconst Box = styled.div`\n    width: 85vw;\n    align-self: flex-start;\n    margin-top: 5vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: stretch;\n    border-radius: 6px;\n    overflow: hidden;\n    transition: 0.3s all;\n    border: ${({theme}) => theme.border };\n\n    .title {\n        margin: 0;\n        padding: 10px 0;\n        text-align: center;\n        font-size: 18px;\n        letter-spacing: 2px;\n        color: white;\n        transition: 0.3s all;\n        border-bottom: ${({theme}) => theme.border };\n        background-color: ${({theme}) => theme.title_bg };\n    }\n\n    .content {\n        padding: 10px;\n        transition: 0.3s all;\n        background-color: ${({theme}) => theme.content_bg };\n\n        .player_list {\n            display: flex;\n        }\n    }\n`\n\nconst themeData = {\n    light: { \n        title_bg: color.$green_color, \n        content_bg: color.$theme_background,\n        border: `1px solid transparent`,\n    },\n    dark: { \n        title_bg: color.$dark_bg_color, \n        content_bg: color.$dark_dim_bg_color,\n        border: `1px solid ${color.$dark_dim_border_color}`,\n    },\n}\n\nconst BindingBox = () => {\n    const [theme] = useRecoilState(themeState);\n    return (\n        <Box\n            theme={themeData[theme]}\n            className=\"box\">\n            <p className=\"title\">BINDING</p>\n            <div className=\"content\">\n                <PlayerList className=\"player_list\" />\n                <BindList theme={theme} />\n            </div>\n        </Box>\n    )\n}\n\ninterface ModalBindingProperty {\n    active: boolean\n}\n\nconst ModalBinding = (props: ModalBindingProperty) => {\n    const { active } = props;\n    return (\n        <Modal\n            active={active}\n            className=\"binding_modal\">\n            <BindingBox />\n        </Modal>\n    )\n}\n\nexport default ModalBinding;","export default __webpack_public_path__ + \"static/media/kanaheiclap.23b0e19f.gif\";","import React from 'react';\nimport db from \"database\";\nimport styled from 'styled-components';\nimport { useRecoilState, useSetRecoilState, useRecoilValue } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { userRoomState } from 'store/user';\nimport { responseToBadDeck } from 'store/deck';\nimport { color } from 'style/theme';\nimport Modal from 'components/Global/Modal';\nimport Kanahei from 'assets/kanaheiclap.gif';\n\nconst themeData = {\n    light: { \n        bg: 'white',\n        border: 'none',\n        fg: color.$default_font_color,\n        yes_button_fg: 'white',\n        yes_button_bg: color.$pink_color,\n        no_button_fg: 'white',\n        no_button_bg: color.$green_color,\n    },\n    dark: { \n        bg: color.$dark_dim_bg_color,\n        border: `1px solid ${color.$dark_dim_border_color}`,\n        fg: color.$dark_default_font_color,\n        yes_button_fg: color.$fluorescent_pink_color,\n        yes_button_bg: 'transparent',\n        no_button_fg: color.$fluorescent_green_color,\n        no_button_bg: 'transparent',\n    },\n}\n\nconst AskBox = styled.div`\n    display:  flex;\n    flex-direction: column;\n    justify-content: center;\n    border-radius: 5px;\n    overflow: hidden;\n    transition: .3s all;\n    background-color: ${({theme}) => theme.bg };\n    border: ${({theme}) => theme.border };\n\n    .content {\n        display:  flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 25px 15px 15px;\n\n        img {\n        width: 80px;\n        margin-bottom: 20px;\n        }\n\n        p {\n            letter-spacing: 1px;\n            transition: .3s all;\n            color: ${({theme}) => theme.fg };\n        }\n    }\n\n    .button_area {\n        display: flex;\n        & > button {\n            padding: 8px 0;\n            font-size: 15px;\n            letter-spacing: 2px;\n            flex: 1 1 50%;\n            transition: .3s all;\n\n            &:first-child {\n                background-color: ${({theme}) => theme.yes_button_bg };\n                color: ${({theme}) => theme.yes_button_fg };\n                border-top: ${({theme}) => theme.border };\n                border-right: ${({theme}) => theme.border };\n            }\n\n            &:last-child {\n                background-color: ${({theme}) => theme.no_button_bg };\n                color: ${({theme}) => theme.no_button_fg };\n                border-top: ${({theme}) => theme.border };\n            }\n        }\n    }\n`\n\nconst Content = () => {\n    const [theme] = useRecoilState(themeState);\n    const roomName = useRecoilValue(userRoomState);\n    const setResponseToBadDeck = useSetRecoilState(responseToBadDeck);\n\n    const restartGame = () => {\n        const roomRef = db.database().ref(`/${roomName}`);\n        roomRef.child('restart').set(true);\n    }\n\n    return (\n        <AskBox theme={themeData[theme]} >\n            <div className=\"content\">\n                <img alt=\"icon\" className=\"icon\" src={Kanahei}></img>\n                <p>好像可以倒牌捏</p>\n            </div >\n            <div className=\"button_area\">\n                <button onClick={restartGame}>倒爆</button>\n                <button onClick={()=>setResponseToBadDeck(true)}>不倒</button>\n            </div>\n        </AskBox >\n    )\n}\n\ninterface ModalGiveUpProperty  {\n    active: boolean;\n}\n\nconst ModalGiveUp = (props: ModalGiveUpProperty) => {\n    const {active} = props;\n    return (\n        <Modal\n            active={active}\n            className=\"give_up_modal\">\n            <Content />\n        </Modal >\n    );\n}\n\nexport default ModalGiveUp","export default __webpack_public_path__ + \"static/media/bumpintowindow.fd5eab02.gif\";","import React from 'react';\nimport db from \"database\";\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilValue} from 'recoil';\nimport { userRoomState, userIDState } from 'store/user';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\nimport styled from 'styled-components';\nimport Modal from 'components/Global/Modal';\nimport Kanahei from 'assets/bumpintowindow.gif';\n\nconst themeData = {\n    light: { \n        bg: 'white',\n        border: 'none',\n        fg: color.$default_font_color,\n        yes_button_fg: 'white',\n        yes_button_bg: color.$pink_color,\n        no_button_fg: 'white',\n        no_button_bg: color.$green_color,\n    },\n    dark: { \n        bg: color.$dark_dim_bg_color,\n        border: `1px solid ${color.$dark_dim_border_color}`,\n        fg: color.$dark_default_font_color,\n        yes_button_fg: color.$fluorescent_pink_color,\n        yes_button_bg: 'transparent',\n        no_button_fg: color.$fluorescent_green_color,\n        no_button_bg: 'transparent',\n    },\n}\n\nconst AskBox = styled.div`\n    display:  flex;\n    flex-direction: column;\n    justify-content: center;\n    border-radius: 5px;\n    overflow: hidden;\n    transition: .3s all;\n    background-color: ${({theme}) => theme.bg };\n    border: ${({theme}) => theme.border };\n\n    .title {\n        padding: 10px 0;\n        text-align: center;\n        letter-spacing: 1px;\n        color: white;\n        background-color: ${color.$pink_color};\n    }\n\n    .content {\n        display:  flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 25px 15px 15px;\n\n        img {\n        width: 80px;\n        margin-bottom: 20px;\n        }\n\n        p {\n            transition: .3s all;\n            color: ${({theme}) => theme.fg };\n        }\n    }\n\n    .button_area {\n        display: flex;\n        & > button {\n            padding: 8px 0;\n            font-size: 15px;\n            letter-spacing: 2px;\n            flex: 1 1 50%;\n            transition: .3s all;\n\n            &:first-child {\n                background-color: ${({theme}) => theme.yes_button_bg };\n                color: ${({theme}) => theme.yes_button_fg };\n                border-top: ${({theme}) => theme.border };\n                border-right: ${({theme}) => theme.border };\n            }\n\n            &:last-child {\n                background-color: ${({theme}) => theme.no_button_bg };\n                color: ${({theme}) => theme.no_button_fg };\n                border-top: ${({theme}) => theme.border };\n            }\n        }\n    }\n`\n\ninterface ContentProperty  {\n    closeModal: () => void;\n}\nconst Content = (props: ContentProperty) => {\n    const { closeModal } = props;\n    const history = useHistory();\n    const theme = useRecoilValue(themeState);\n    const userID = useRecoilValue(userIDState);\n    const roomName = useRecoilValue(userRoomState);\n    const roomRef = db.database().ref(`/${roomName}`);\n\n    const leaveGame = async() => {\n        await roomRef.child('playersInfo').child(userID).remove();\n        await roomRef.child('someoneLeaveGame').set(true);\n        history.push('/');\n    }\n\n    return (\n        <AskBox theme={themeData[theme]}>\n            <div className=\"content\">\n                <img alt=\"celebrate-icon\" className=\"icon\" src={Kanahei}></img>\n                <p>確定要離開嗎？</p>\n            </div >\n            <div className=\"button_area\">\n                <button onClick={leaveGame}>離開</button>\n                <button onClick={closeModal}>繼續玩</button>\n            </div>\n        </AskBox >\n    )\n}\n\ninterface ModalConfirmLeaveProperty  {\n    active: boolean;\n    closeModal: () => void;\n}\nconst ModalConfirmLeave = (props: ModalConfirmLeaveProperty) => {\n    const { active, closeModal } = props;\n    return (\n        <Modal\n            active={active}\n            className=\"confirm_leave_modal\"\n        >\n            <Content closeModal={closeModal} />\n        </Modal >\n    );\n}\n\nexport default ModalConfirmLeave","const sleep = (ms: number) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport default sleep;","import React, { useEffect, useState } from 'react';\nimport db from \"database\";\nimport Lottie from 'react-lottie';\nimport styled from 'styled-components';\nimport { useHistory } from \"react-router-dom\";\nimport { useRecoilValue, useResetRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { modalState } from 'store/modal';\nimport { userTeamState, userRoomState, userIDState, userNameState } from 'store/user';\nimport { color } from 'style/theme';\nimport { PlayerData, TeamTypes } from 'types/player';\nimport Modal from 'components/Global/Modal';\nimport Button from 'components/Global/Button';\nimport mainFireWork from 'assets/fireworks/16764-firework-animaiton.json';\nimport subFireWork from 'assets/fireworks/14438-fireworks.json';\nimport thirdFireWork from 'assets/fireworks/lf30_editor_he0cup9w.json';\nimport sleep from 'util/sleep';\n\nconst AninimationBox = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n\n    & > div {\n        &:nth-child(1) {\n            position: absolute;\n            left: -30px;\n            top: -100px;\n        }\n        &:nth-child(2) {\n            position: absolute;\n            left: 30px;\n            top: 300px;\n        }\n        &:nth-child(3) {\n            position: absolute;\n            left: -10px;\n            top: 20px;\n        }\n        &:nth-child(4) {\n            position: absolute;\n            left: 100px;\n            top: 20px;\n        }\n        &:nth-child(5) {\n            position: absolute;\n            left: 50px;\n            top: 400px;\n        }\n        &:nth-child(6) {\n            position: absolute;\n            left: -80px;\n            top: -20px;\n        }\n        &:nth-child(7) {\n            position: absolute;\n            left: -50%;\n            top: 25%;\n        }\n        &:nth-child(8) {\n            position: absolute;\n            left: 20%;\n            top: 60%;\n        }\n        &:nth-child(9) {\n            position: absolute;\n            left: -30%;\n            bottom: 10%;\n        }\n        &:nth-child(10) {\n            position: absolute;\n            left: 0;\n            bottom: 10%;\n        }\n        &:nth-child(11) {\n            position: absolute;\n            left: -30%;\n            top: 10%;\n        }\n        &:nth-child(12) {\n            position: absolute;\n            left: -50%;\n            top: 60%;\n        }\n    }\n`\n\nconst Animations = () => {\n    const [delay, toggleDelay] = useState(false);\n\n    const setDelay = async () => {\n        await sleep(600);\n        toggleDelay(true)\n    }\n\n    useEffect(() => {\n        setDelay()\n    }, [])\n\n    const mainFireWorkData = {\n        loop: true,\n        autoplay: true,\n        animationData: mainFireWork,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    const subFireWorkData = {\n        loop: true,\n        autoplay: true,\n        animationData: subFireWork,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    const thirdFireWorkData = {\n        loop: true,\n        autoplay: true,\n        animationData: thirdFireWork,\n        rendererSettings: {\n            preserveAspectRatio: 'xMidYMid slice'\n        }\n    };\n\n    return (\n        <AninimationBox>\n            {delay && <Lottie options={thirdFireWork}\n                height={500}\n                width={500}\n            />}\n            {delay && <Lottie options={mainFireWorkData}\n                height={600}\n                width={600}\n            />}\n            {delay && <Lottie options={thirdFireWork}\n                height={500}\n                width={500}\n            />}\n            <Lottie options={mainFireWorkData}\n                height={300}\n                width={300}\n            />\n            {delay && <Lottie options={thirdFireWork}\n                height={250}\n                width={300}\n            />}\n            <Lottie options={subFireWorkData}\n                height={300}\n                width={300}\n            />\n            <Lottie options={thirdFireWorkData}\n                height={300}\n                width={300}\n            />\n            {delay && <Lottie options={thirdFireWorkData}\n                height={300}\n                width={300}\n            />}\n            <Lottie options={subFireWorkData}\n                height={200}\n                width={500}\n            />\n            <Lottie options={subFireWorkData}\n                height={400}\n                width={400}\n            />\n            <Lottie options={mainFireWorkData}\n                height={500}\n                width={500}\n            />\n            <Lottie options={thirdFireWorkData}\n                height={400}\n                width={400}\n            />\n        </AninimationBox>\n    )\n};\n\n\nconst themeData = {\n    light: {\n        bg: 'white',\n        title_bg: color.$pink_color,\n        border: 'none',\n        title_fg: 'white',\n        win_fg: color.$default_font_color,\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        title_bg: 'transparent',\n        border: `1px solid ${color.$fluorescent_pink_color}`,\n        title_fg: color.$fluorescent_pink_color,\n        win_fg: color.$fluorescent_yellow_color,\n    },\n}\n\nconst ResultBox = styled.div`\n    z-index: 100;\n    display:  flex;\n    flex-direction: column;\n    justify-content: center;\n    background-color: white;\n    border-radius: 5px;\n    overflow: hidden;\n    background-color: ${({ theme }) => theme.bg};\n    border: ${({ theme }) => theme.border};\n\n    .title {\n        font-size: 20px;\n        letter-spacing: 5px;\n        text-align: center;\n        color: white;\n        padding: 5px 0;\n        color: ${({ theme }) => theme.title_fg};\n        background-color: ${({ theme }) => theme.title_bg};\n        border-bottom: ${({ theme }) => theme.border};\n    }\n\n    .content {\n        box-sizing: border-box;\n        padding: 15px;\n\n        .text {\n            text-align: center;\n            letter-spacing: 3px;\n            margin-bottom: 25px;\n            color: ${({ theme }) => theme.win_fg};\n\n            .hint {\n                margin-top: 5px;\n                letter-spacing: 1px;\n                font-size: 12px;\n                color: ${color.$unable_font_color};\n            }\n        }\n    }\n\n    .button_area {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        z-index: 100;\n\n        & > button {\n            width: 80%;\n            & + button {\n                margin-top: 10px;\n            }\n        }\n    }\n`\n\ninterface ContentProperty {\n    isUserWin: boolean;\n    refreshGame: () => void;\n    winTeam: TeamTypes | null;\n    toggleLoadingWindow: React.Dispatch<React.SetStateAction<boolean>>;\n    openConfirmLeaveModal: () => void;\n}\n\nconst Content = (props: ContentProperty) => {\n    const { winTeam, isUserWin, toggleLoadingWindow, openConfirmLeaveModal, refreshGame } = props;\n    const theme = useRecoilValue(themeState);\n    const userID = useRecoilValue(userIDState);\n    const userName = useRecoilValue(userNameState);\n    const roomName = useRecoilValue(userRoomState);\n    const teamName = winTeam === TeamTypes.TeamOne ? '草莓糕' : '可麗露';\n    const initModalType = useResetRecoilState(modalState);\n    const history = useHistory();\n    const roomRef = db.database().ref(`/${roomName}`);\n    const buttonColor = {\n        light: {\n            yellow_button: color.$highlight_color,\n            orange_button: color.$orange_color,\n            green_button: color.$green_color,\n        },\n        dark: {\n            yellow_button: color.$fluorescent_orange_color,\n            orange_button: color.$fluorescent_yellow_color,\n            green_button: color.$fluorescent_green_color,\n        }\n    }\n\n    useEffect(()=>{\n        listenOnOneMoreGame();\n        return () => removeOneMoreGameListener();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);\n\n    const startNewGame = () => {\n        refreshGame();\n        roomRef.child('playersInfo').child(userID).update({ ready: false });\n        toggleLoadingWindow(false);\n    }\n\n    const listenOnOneMoreGame = () => {\n        const oneMoreGameRef = roomRef.child('oneMoreGame');\n\n        oneMoreGameRef.on(\"value\", async data => {\n            const isTrigger = data.val();\n            if (isTrigger) {\n                startNewGame();\n            }\n        });\n    }\n\n    const removeOneMoreGameListener = () => {\n        const oneMoreGameRef = roomRef.child('oneMoreGame');\n        oneMoreGameRef.off();\n    }\n\n    const backToWaitRoom = () => {\n        const toPath = `/${roomName}/waiting_room/${userID}`;\n        history.push(toPath);\n        initModalType();\n        roomRef.child('changeMate').set(true);\n    }\n\n    const setReady = async (isReady: boolean) => {\n        const userInfo = roomRef.child('playersInfo').child(userID);\n        await userInfo.update({ ready: isReady });\n\n        if (isReady) {\n            await roomRef.child('playersInfo').once(\"value\", async (data) => {\n                const playersData = Object.values(data.val()) as PlayerData[];\n                const allReady = playersData.filter(data => data.ready).length === 4;\n                if (allReady) {\n                    await roomRef.child('currentPlayer').set(userName);\n                    await roomRef.child('oneMoreGame').set(true);\n                }\n            })\n        }\n    }\n\n    const readyToNextRound = async () => {\n        setReady(true);\n        toggleLoadingWindow(true);\n    }\n\n    return (\n        <ResultBox\n            theme={themeData[theme]}\n            className=\"result_box\">\n            <p className=\"title\">勝負揭曉</p>\n            <div className=\"content\">\n                <div className=\"text\">\n                    {isUserWin\n                        ? (\n                            <>\n                                <p>🎉恭喜<span>{teamName}</span>贏惹🎉</p>\n                                <p className=\"hint\">(請享受贏家才有的煙火)</p>\n                            </>\n                        )\n                        : (\n                            <>\n                                <p>🥲NO～<span>{teamName}</span>贏惹🥲</p>\n                                <p className=\"hint\">(別氣餒！努力獲勝就能看煙火！)</p>\n                            </>\n                        )\n                    }\n                </div>\n                <div className=\"button_area\">\n                    <Button\n                        onClick={backToWaitRoom}\n                        color={buttonColor[theme].yellow_button}>更換隊友</Button>\n                    <Button\n                        onClick={readyToNextRound}\n                        color={buttonColor[theme].orange_button}>再玩一局</Button>\n                    <Button\n                        onClick={openConfirmLeaveModal}\n                        color={buttonColor[theme].green_button}>翻桌不玩</Button>\n                </div>\n            </div >\n        </ResultBox >\n    )\n};\n\ninterface ModalResultProperty {\n    active: boolean;\n    winTeam: TeamTypes | null;\n    refreshGame: () => void;\n    toggleLoadingWindow: React.Dispatch<React.SetStateAction<boolean>>;\n    openConfirmLeaveModal: () => void;\n}\n\nconst ModalResult = (props: ModalResultProperty) => {\n    const { active, winTeam, toggleLoadingWindow, openConfirmLeaveModal, refreshGame } = props;\n    const userTeam = useRecoilValue(userTeamState);\n    const isUserWin = winTeam === userTeam;\n    \n    return (\n        <Modal\n            active={active}\n            className=\"result_modal\">\n            <Content\n                winTeam={winTeam}\n                isUserWin={isUserWin}\n                refreshGame={refreshGame}\n                toggleLoadingWindow={toggleLoadingWindow}\n                openConfirmLeaveModal={openConfirmLeaveModal}\n            />\n            {isUserWin && <Animations />}\n        </Modal >\n    );\n}\n\nexport default ModalResult","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useHistory } from \"react-router-dom\";\nimport db from \"database\";\nimport ModalBinding from 'components/GameRoom/Modal/ModalBinding';\nimport ModalGiveUp from 'components/GameRoom/Modal/ModalGiveUp';\nimport ModalConfirmLeave from 'components/GameRoom/Modal/ModalConfirmLeave';\nimport ModalResult from 'components/GameRoom/Modal/ModalResult';\nimport Loading from 'components/Global/Loading';\nimport { trumpState, isGameEndState } from 'store/game';\nimport { userRoomState, userIDState } from 'store/user';\nimport { modalState } from 'store/modal';\nimport { OKtoPlay } from 'store/deck';\nimport { useRecoilState, useRecoilValue, useResetRecoilState } from 'recoil';\n\nconst Root = styled.div`\n`\n\ninterface ModalRootProperty {\n    initGameData: () => void;\n}\n\nconst ModalRoot = (props: ModalRootProperty) => {\n    const { initGameData } = props;\n    const history = useHistory();\n    const [isLoading, toggleLoading] = useState(false);\n    const trump = useRecoilValue(trumpState);\n    const userID = useRecoilValue(userIDState);\n    const roomName = useRecoilValue(userRoomState);\n    const isOKtoPlay = useRecoilValue(OKtoPlay);\n    const isGotWinner = useRecoilValue(isGameEndState);\n    const [modalType, setModalType] = useRecoilState(modalState);\n    const initModalType = useResetRecoilState(modalState);\n    const roomRef = db.database().ref(`/${roomName}`);\n\n    const backToWaitRoom = () => {\n        const toPath = `/${roomName}/waiting_room/${userID}`;\n        history.push(toPath);\n        initGameData();\n        initModalType();\n        roomRef.child('changeMate').remove();\n        roomRef.child('someoneLeaveGame').remove();\n    }\n\n    const refreshGame = async (type: 'restart'|'oneMoreGame' = 'restart') => {\n        await initGameData();\n        roomRef.child(type).remove();\n    }\n\n    const closeModal = () => initModalType();\n\n    return (\n        <Root className=\"modal_root\">\n            <ModalBinding active={!trump && isOKtoPlay} />\n            <ModalGiveUp active={!isOKtoPlay} />\n            <ModalResult\n                active={!!isGotWinner}\n                refreshGame={()=>refreshGame('oneMoreGame')}\n                openConfirmLeaveModal={()=>setModalType('cofirm-leave')}\n                toggleLoadingWindow={toggleLoading}\n                winTeam={isGotWinner}\n            />\n            <ModalConfirmLeave \n                active={modalType === 'cofirm-leave'} \n                closeModal={closeModal} />\n            <Loading\n                active={modalType === 'countdown-leave'}\n                type={modalType}\n                countdown={3}\n                action={backToWaitRoom}\n                actionText=\"回到等待室\"\n                text=\"有人離開嚕！\"\n                noOpacity\n            />\n            <Loading\n                active={modalType === 'countdown-change-mate'}\n                type={modalType}\n                countdown={3}\n                action={backToWaitRoom}\n                actionText=\"回到等待室\"\n                text=\"有人要換隊友唷！\"\n                noOpacity\n            />\n            <Loading\n                active={modalType === 'countdown-restart'}\n                type={modalType}\n                countdown={3}\n                action={()=>refreshGame('restart')}\n                actionText=\"重新牌局\"\n                text=\"倒牌啦！\"\n                noOpacity\n            />\n            <Loading\n                active={isLoading}\n                cancelReady={() => toggleLoading(false)}\n            />\n        </Root>\n    )\n}\n\nexport default ModalRoot;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { suitColor, suitInPoker } from 'util/suit'\nimport { SuitColor, CardSuitType } from 'types/card';\nimport { color } from \"style/theme\";\nimport { themeState } from 'store/theme';\n\nfunction numberInPoker(number: number) {\n    const poker = [\n        \"2\",\n        \"3\",\n        \"4\",\n        \"5\",\n        \"6\",\n        \"7\",\n        \"8\",\n        \"9\",\n        \"10\",\n        \"J\",\n        \"Q\",\n        \"K\",\n        \"A\",\n    ];\n    return poker[number - 1];\n};\n\ninterface PokerCardProperty {\n    suitColor: SuitColor;\n}\n\nconst themeData = {\n    light: {\n        front_bg: '#FAF9F8',\n        back_bg: '#eaeaea',\n        border: 'white',\n        suit_red: color.$red_suit_color,\n        suit_black: color.$black_suit_color,\n        pattern: 'white',\n        shadow: color.$shadow,\n    },\n    dark: {\n        front_bg: color.$dark_bg_color,\n        back_bg: '#312D28',\n        border: color.$dark_dim_border_color,\n        suit_red: color.$dark_red_suit_color,\n        suit_black: color.$dark_black_suit_color,\n        pattern: color.$dark_dim_bg_color,\n        shadow: 'transparent',\n    },\n}\n\nconst PokerCard = styled.div<PokerCardProperty>`\n    z-index: 1;\n    display: flex;\n    justify-content: space-between;\n    border-radius: 3px;\n    box-sizing: border-box;\n    padding: 2px;\n    transition: all .3s;\n    border: 1px solid ${({ theme }) => theme.border};\n    background-color: ${({ theme }) => theme.front_bg};\n\n    .card_info {\n        display: flex;\n        flex: 0 1 auto;\n        flex-direction: column;\n\n        &.reverse {\n            transform: rotate(180deg);\n        }\n\n        .number,\n        .suit {\n            font-size: 12px;\n            text-align: center;\n            transition: all .3s;\n            color: ${({ suitColor, theme }) => theme[`suit_${suitColor}`]};\n\n            &.suit {\n                margin-top: 1px;\n            }\n        }\n    }\n\n    .pattern {\n        flex: 1 1 100%;\n        margin: 10px 4px;\n        transition: all .3s;\n        background-color: ${({ theme }) => theme.pattern};\n    }\n\n    &.group {\n        width: 16vw;\n        height: 23vw;\n        & + .group {\n            margin-left: -11vw;\n        }\n\n        &.other_player_card{\n            background-color: ${({ theme }) => theme.back_bg};;\n        }\n    }\n\n    &.played_card {\n        width: 12.5vw;\n        height: 15.5vw;\n        box-shadow: 1px 1px 2px 1px ${({ theme }) => theme.shadow};\n    }\n\n    &.isPicked{\n        flex: 0 0 auto;\n        transform: translateY(-30%) scale(1.1);\n\n        &:not(:first-child){\n            margin-left: -7vw !important;\n        }\n    }\n\n    &.isNotPicked{\n        &:last-child {\n            flex: 0 0 auto;\n        }\n    }\n`\n\nexport interface CardProperty {\n    number?: number;\n    suit?: CardSuitType;\n    className?: string;\n    onClick?: (e: React.MouseEvent<HTMLElement>) => void;\n    hasDetail?: Boolean;\n    nowPickSuit?: CardSuitType | null;\n}\n\nconst Card = (props: CardProperty) => {\n    const { number, suit, className, hasDetail = false, onClick = () => { }, nowPickSuit } = props;\n    const theme = useRecoilValue(themeState);\n    const numberOnCard = number ? numberInPoker(number) : null;\n    const suitOnCard = suit ? suitInPoker(suit) : null;\n    const sameSuit = nowPickSuit && (suit === nowPickSuit);\n    const isNotPicked = nowPickSuit && (suit !== nowPickSuit);\n\n    return (\n        <PokerCard\n            theme={themeData[theme]}\n            onClick={onClick}\n            className={classnames(className, \"poker_card\",\n                {\n                    'isPicked': sameSuit,\n                    'isNotPicked': isNotPicked,\n                })}\n            suitColor={suitColor(suit)}\n        >\n            {hasDetail && (\n                <>\n                    <div className=\"card_info\">\n                        <span className={`number`}>{numberOnCard}</span>\n                        <span className={`suit`}>{suitOnCard}&#xFE0E;</span>\n                    </div>\n                    <div className=\"pattern\"></div>\n                    <div className=\"card_info reverse\">\n                        <span className={`number`}>{numberOnCard}</span>\n                        <span className={`suit`}>{suitOnCard}&#xFE0E;</span>\n                    </div>\n                </>\n            )}\n        </PokerCard>\n    )\n\n}\n\nexport default Card","export enum NavigatorTypes {\n\tWonTricks = 'wintricks',\n\tSettings = 'settings',\n}","import React from 'react';\nimport db from \"database\";\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { userDeckState } from 'store/deck';\nimport { isUserTurnState, thisRoundSuitState, isUserLastPlayerState } from 'store/game';\nimport { userNameState, userRoomState } from 'store/user';\nimport { relationWithUser } from 'store/players';\nimport { Card, Suits } from 'types/card';\nimport CardLayout from '../Card'\n\ninterface UserHandCardsProperty {\n    className: string;\n}\nconst UserHandCards = (props: UserHandCardsProperty) => {\n    const { className } = props;\n    const roomName = useRecoilValue(userRoomState);\n    const userName = useRecoilValue(userNameState);\n    const isUserTurn = useRecoilValue(isUserTurnState);\n    const thisRoundSuit = useRecoilValue(thisRoundSuitState);\n    const isUserLastPlayer = useRecoilValue(isUserLastPlayerState);\n    const { nextPlayer } = useRecoilValue(relationWithUser);\n    const [userDeck, setUserDeck] = useRecoilState(userDeckState);\n    const [nowPickSuit, setNowPickSuit] = React.useState<Suits | null>(null);\n    const roomRef = db.database().ref(`/${roomName}`);\n    const gameInfoRef = roomRef.child('gameInfo');\n\n    const handlePickCard = async (e: React.MouseEvent<HTMLElement>, card: Card) => {\n        e.stopPropagation();\n        const { suit, number } = card\n        if (!isUserTurn) return;\n        if (!isValidCard(suit)) return setNowPickSuit(null);\n        if (suit === nowPickSuit) {\n            // 出牌\n            await playCard({ number, suit });\n            removeCardFromDeck({ number, suit });\n            setNowPickSuit(null);\n            if (!isUserLastPlayer) {\n                await switchToNextPlayer();\n            }\n        } else {\n            setNowPickSuit(suit);\n        }\n    }\n\n    const isValidCard = (pickedSuit: Suits) => {\n        if (!thisRoundSuit) return true;\n        if (thisRoundSuit && pickedSuit !== thisRoundSuit) {\n            if (userDeck.some(card => card.suit === thisRoundSuit)) {\n                return false\n            } else {\n                return true\n            }\n        } else {\n            return true\n        }\n    }\n\n    const playCard = async (card: Card) => {\n        const { suit, number } = card;\n        const cardsRef = gameInfoRef.child('thisRoundCards');\n        const suitRef = gameInfoRef.child('thisRoundSuit');\n        const userPlayData = {\n            player: userName,\n            card: { number, suit },\n        }\n        await cardsRef.once(\"value\", d => {\n            const cards = d.val() || [];\n            if (!cards.length) {\n                suitRef.set(suit);\n            }\n            cardsRef.set([...cards, userPlayData]);\n        });\n    }\n\n    const removeCardFromDeck = (card: Card) => {\n        const { suit, number } = card;\n        const newDeck = userDeck.filter(card => {\n            const isCard = card.number === number && card.suit === suit;\n            return !isCard;\n        })\n        setUserDeck(newDeck);\n    };\n\n    const switchToNextPlayer = async () => {\n        const nextPlayerRef = roomRef.child('currentPlayer');\n        await nextPlayerRef.set(nextPlayer);\n    }\n\n    return (\n        <div className={className}>\n            {userDeck.map(({ number, suit }) => (\n            <CardLayout\n                nowPickSuit={nowPickSuit}\n                onClick={(e) => handlePickCard(e, { number, suit })}\n                className=\"group user_card\"\n                key={number + suit}\n                number={number}\n                suit={suit}\n                hasDetail\n            />))}\n        </div>\n    )\n\n}\n\nexport default UserHandCards","import React from 'react';\nimport Card from '../Card';\nimport generateArray from 'util/generateArray';\n\ninterface OtherUserHandCardsProperty  {\n    className: string;\n    cardAmount: number;\n}\nconst OtherUserHandCards = (props: OtherUserHandCardsProperty) => {\n    const { className, cardAmount } = props;\n    const cardArray = generateArray(cardAmount);\n    return (\n        <div className={className}>\n            {cardArray.map(card=>(\n                <Card key={card} className=\"group other_player_card\" />\n            ))}\n        </div>\n    )\n}\n\nexport default OtherUserHandCards;","import React from 'react';\nimport classnames from 'classnames';\nimport { useRecoilValue } from 'recoil';\nimport styled from 'styled-components';\nimport { relationWithUser } from 'store/players';\nimport { otherPlayerDeckState } from 'store/deck';\nimport UserHandCards from './UserHandCards';\nimport OtherUserHandCards from './OtherUserHandCards';\n\nconst CardGroup = styled.div`\n\tposition: absolute;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 100%;\n\theight: 100%;\n\n\t.cards {\n\t\tdisplay: flex;\n\n\t\t&__user {\n\t\t\tmargin-top: auto;\n\t\t\tmargin-bottom: 10px;\n\t\t\tmax-width: 90vw;\n\t\t}\n\n\t\t&__left {\n\t\t\tposition: absolute;\n\t\t\ttransform-origin: left top;\n\t\t\ttransform: rotate(90deg) translate(-50%, -50%);\n\t\t\ttop: 50%;\n\t\t\tleft: 0;\n\t\t}\n\n\t\t&__right {\n\t\t\tposition: absolute;\n\t\t\ttransform-origin: right top;\n\t\t\ttransform: rotate(-90deg) translate(50%, -50%);\n\t\t\ttop: 50%;\n\t\t\tright: 0;\n\t\t}\n\n\t\t&__cross {\n\t\t\tmargin-top: -15px;\n\t\t}\n\n\t}\n`\n\nconst Cards = () => {\n\tconst order = ['cross', 'left', 'right', 'user'];\n\tconst { teammate, nextPlayer, previousPlayer} = useRecoilValue(relationWithUser);\n\tconst otherPlayerDeck = useRecoilValue(otherPlayerDeckState);\n\tconst orderedPlayers = [teammate, nextPlayer, previousPlayer];\n\n\treturn (\n\t\t<CardGroup className=\"card_group\">\n\t\t\t{order.map((order, index) => (\n\t\t\t\torder === 'user'\n\t\t\t\t\t? <UserHandCards key={order} className={classnames(\"cards\", `cards__${order}`)} />\n\t\t\t\t\t: <OtherUserHandCards \n\t\t\t\t\t\tkey={order} \n\t\t\t\t\t\tclassName={classnames(\"cards\", `cards__${order}`)} \n\t\t\t\t\t\tcardAmount={otherPlayerDeck[orderedPlayers[index]]}/>\n\t\t\t))}\n\t\t</CardGroup >\n\t)\n}\n\nexport default Cards;","import React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { useRecoilValue } from 'recoil';\nimport { TeamTypes } from 'types/player';\nimport { ThemeTypes } from 'types/theme';\nimport { themeState } from 'store/theme';\nimport { relationWithUser } from 'store/players';\nimport { userNameState, userTeamState } from 'store/user';\nimport { currentPlayerName, trumpState } from 'store/game';\nimport ThinkingIcon from 'components/GameRoom/ThinkingIcon';\nimport { color } from 'style/theme'\n\nconst themeData = {\n    light: {\n        name_bg: 'white',\n        fc: color.$title_font_color,\n        bw: '0px',\n        border: 'transparent',\n        team: {\n            team1: color.$pink_color,\n            team2: color.$brown_color,\n        },\n        highlight_color_team: {\n            team1: color.$highlight_color,\n            team2: color.$highlight_color,\n        },\n\n    },\n    dark: {\n        name_bg: color.$dark_dim_bg_color,\n        fc: color.$light_pink_color,\n        bw: '1px',\n        team: {\n            team1: color.$fluorescent_pink_color,\n            team2: color.$fluorescent_yellow_color\n        },\n        highlight_color_team: {\n            team1: color.$fluorescent_pink_color,\n            team2: color.$fluorescent_yellow_color\n        },\n    },\n}\n\ninterface TagProperty {\n    themeType: ThemeTypes;\n    team: TeamTypes;\n}\n\nconst Tag = styled.div<TagProperty>`\n    position: absolute;\n\n    &.is_player_turn {\n        .player_info {\n            border-width: 2px;\n            border-color: ${({ theme, team }) => theme.highlight_color_team[team]};\n        }\n    }\n\n    &.tag {\n        &_cross {\n            top: 0;\n            transform: translate(-50%, -50%);\n            left: 50%;\n        }\n        &_left {\n            transform-origin: left top;\n            transform: rotate(-90deg) translate(-50%, -50%);\n            top: 50%;\n            left: 0;\n        }\n        &_right {\n            transform: rotate(90deg) translate(50%, -50%);\n            transform-origin: right top;\n            top: 50%;\n            right: 0;\n        }\n        &_user {\n            bottom: 0px;\n            left: 50%;\n            transform: translate(-50%, 50%);\n        }\n    }\n\n    .player_info {\n        display: flex;\n        vertical-align: middle;\n        border-radius: 5px;\n        font-size: 14px;\n        line-height: 26px;\n        background-color: white;\n        overflow: hidden;\n        padding-right: 10px;\n        border-style: solid;\n        border-width: ${({ theme }) => theme.bw};\n        border-color: ${({ themeType, theme, team }) => (themeType === ThemeTypes.Light ? 'transparent' : theme.team[team])};\n        background-color: ${({ theme }) => theme.name_bg};\n        color: ${({ theme }) => theme.fc};\n\n        .team {\n            padding: 5px 10px;\n            transition: .3s all;\n            background-color: ${({ theme, team }) => theme.team[team]};\n        }\n\n        .name {\n            max-width: 32vw;\n            letter-spacing: 1px;\n            padding-left: 10px;\n            white-space: nowrap;\n            overflow: hidden;\n        }\n    }\n`\n\ninterface PlayerNameTagProperty {\n    className: string;\n    player: string;\n    team: TeamTypes;\n    isCurrentPlayer: boolean;\n}\n\nconst PlayerNameTag = (props: PlayerNameTagProperty) => {\n    const { className, isCurrentPlayer = false, player, team } = props;\n    const theme = useRecoilValue(themeState);\n    return (\n        <Tag\n            theme={themeData[theme]}\n            themeType={theme}\n            team={team}\n            className={classnames(className, { \"is_player_turn\": isCurrentPlayer })}>\n            {isCurrentPlayer && <ThinkingIcon className=\"on_table\" />}\n            <div className=\"player_info\">\n                <div className=\"team\"></div>\n                <div className=\"name\">{player}</div>\n            </div>\n        </Tag>\n    )\n}\n\nconst Names = styled.div`\n    position: relative;\n    width: 100%;\n    height: 100%;\n    z-index: 2;\n`\n\nconst Nameplate = () => {\n    const players = useRecoilValue(relationWithUser);\n    const user = useRecoilValue(userNameState);\n    const currentPlayer = useRecoilValue(currentPlayerName);\n    const trump = useRecoilValue(trumpState);\n    const userTeam = useRecoilValue(userTeamState);\n    const order = ['cross', 'left', 'right', 'user'];\n    const orderedPlayers = [players.teammate, players.nextPlayer, players.previousPlayer, user];\n    const anotherTeam = [TeamTypes.TeamOne, TeamTypes.TeamTwo].find(team => team !== userTeam) as TeamTypes;\n    const teamArray = [userTeam, anotherTeam, anotherTeam, userTeam];\n\n    return (\n        <Names className=\"players_name\">\n            {orderedPlayers.map((player, index) => (\n                <PlayerNameTag\n                    key={order[index]}\n                    className={`tag_${order[index]}`}\n                    player={player}\n                    isCurrentPlayer={!!trump && (currentPlayer === player)}\n                    team={teamArray[index] || TeamTypes.TeamOne}\n                />\n            )\n            )}\n        </Names>\n    )\n}\n\nexport default Nameplate","import React, { useEffect } from 'react';\nimport db from \"database\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { Team} from 'types/player';\nimport { Card as CardInterface, CardSuitType } from 'types/card';\nimport { userRoomState, userNameState } from 'store/user';\nimport { teamScoresState } from 'store/score';\nimport { userWinTricksState } from 'store/winTricks';\nimport { otherPlayerDeckState } from 'store/deck';\nimport { thisRoundCardsState, isThisRoundEndState, trumpState, thisRoundSuitState } from 'store/game';\nimport { relationWithUser, OrderedStartFromTeamOne } from 'store/players';\nimport { getBiggestCard } from 'util/game';\nimport sleep from 'util/sleep';\nimport Card from 'components/GameRoom/Card';\n\nconst CardGroup = styled.div`\n    position: absolute;\n    top: 0;\n    width: 100%;\n    height: 100%;\n\n    .played_card {\n        position: absolute;\n        &.user {\n        left: 50%;\n        bottom: 25px;\n        transform: translateX(-50%);\n        }\n        &.cross {\n            left: 50%;\n            top: 25px;\n            transform: translateX(-50%);\n        }\n        &.left {\n            left: 25px;\n            top: 50%;\n            transform-origin: left top;\n            transform: rotate(90deg) translate(-50%, -100%);\n        }\n        &.right {\n            right: 25px;\n            top: 50%;\n            transform-origin: right top;\n            transform: rotate(90deg) translateX(50%);\n        }\n    }\n`\n\nconst PlayedCard = () => {\n    const roomName = useRecoilValue(userRoomState);\n    const user = useRecoilValue(userNameState);\n    const { teammate, nextPlayer, previousPlayer } = useRecoilValue(relationWithUser);\n    const teamArray = useRecoilValue(OrderedStartFromTeamOne);\n    const trump = useRecoilValue(trumpState);\n    const currentSuit = useRecoilValue(thisRoundSuitState);\n    const [thisRoundCards, updateThisRoundCards] = useRecoilState(thisRoundCardsState);\n    const [teamScores, updateTeamScores] = useRecoilState(teamScoresState);\n    const isThisRoundEnd = useRecoilValue(isThisRoundEndState);\n    const setOtherPlayerDeck = useSetRecoilState(otherPlayerDeckState);\n    const setUserWinTricks = useSetRecoilState(userWinTricksState);\n    const roomRef = db.database().ref(`/${roomName}`);\n\n    useEffect(()=>{\n        const cardsRef = db.database().ref(`/${roomName}`).child('gameInfo').child('thisRoundCards');\n        cardsRef.on(\"value\", d => {\n            const cards = d.val() || [];\n            updateThisRoundCards(orderCards(cards));\n\n            const playedPlayer = cards[ cards.length - 1 ]?.player;\n            if (playedPlayer && playedPlayer !== user) {\n                setOtherPlayerDeck(pre => ({\n                    ...pre, \n                    [playedPlayer]: pre[playedPlayer] - 1\n                }))\n            }\n        });\n\n        return () => {\n            cardsRef.off();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[]);\n\n    useEffect(()=>{\n        if(isThisRoundEnd){\n            handleRoundEnded();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[isThisRoundEnd])\n\n    const handleRoundEnded = async () => {\n        const currentPlayerRef = roomRef.child('currentPlayer');\n        await currentPlayerRef.set(null);\n        await sleep(2000);\n        const winner = getRoundWinner();\n        updatePoints(winner);\n        if(winner === user) {\n            collectThisTrick();\n        }\n        await currentPlayerRef.set(winner);\n        initRoundData();\n    }\n\n    const initRoundData = () => {\n        const thisRoundSuitRef = roomRef.child('gameInfo').child('thisRoundSuit');\n        const thisRoundCardsRef = roomRef.child('gameInfo').child('thisRoundCards');\n        thisRoundSuitRef.remove();\n        thisRoundCardsRef.remove();\n    }\n\n    const getRoundWinner = () => { \n        const winnerIndex = getBiggestCard(\n            trump?.suit as CardSuitType, \n            currentSuit as CardSuitType, \n            thisRoundCards);\n        const playersOrder = [teammate, nextPlayer, previousPlayer, user];\n        return playersOrder[winnerIndex];\n    };\n\n    const updatePoints = (winner: string) => {\n        const winnerTeam = teamArray\n            .map((player, i) => ({ player, team: `team${i % 2 + 1}` }))\n            .find(p => p.player === winner)?.team as Team;\n\n        if(winnerTeam) {\n            updateTeamScores({\n                ...teamScores,\n                [winnerTeam]: teamScores[winnerTeam] + 1\n            })\n        }\n    };\n\n    interface PlayedCard {\n        player: string;\n        card: CardInterface\n    }\n\n    const orderCards = (cards: PlayedCard[]) => {\n        if(!cards.length) return [];\n        const orderedPlayers = [teammate, nextPlayer, previousPlayer, user];\n        const result = orderedPlayers.map(playerName => {\n            const card = cards.find(card => card.player === playerName) as PlayedCard | null;\n            return card?.card;\n        })\n        return result as CardInterface[];\n    }\n\n    const collectThisTrick = () => {\n        setUserWinTricks(pre => ([...pre, thisRoundCards]))\n    };\n\n    return (\n        <CardGroup className=\"played_cards_group\">\n            {thisRoundCards.map((card,index) => {\n                const order = ['cross', 'left', 'right', 'user'];\n                return card && (\n                <Card\n                    key={order[index]}\n                    className={classnames(\"played_card\",order[index])}\n                    number={card.number}\n                    suit={card.suit}\n                    hasDetail\n                />\n            )})}\n        </CardGroup>\n    )\n}\n\nexport default PlayedCard","import { Card, CardSuitType } from 'types/card';\n\nconst countPoint = (trump: CardSuitType, currentSuit: CardSuitType, card: Card) => {\n    let point = 0;\n    if (card.suit === trump) {\n        point += 20;\n    }\n    if (card.suit !== trump && card.suit !== currentSuit) {\n        point -= 20;\n    }\n    point += card.number;\n    return point;\n};\n\nexport const getBiggestCard = (trump: CardSuitType, currentSuit: CardSuitType, cards: Card[]) => {\n    const point = cards.map((card) => {\n        const point = countPoint(trump, currentSuit, card);\n        return point;\n    });\n\n    const winnerIndex = point.indexOf(Math.max(...point));\n    return winnerIndex;\n};","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from \"style/theme\";\nimport Nameplate from './Nameplate';\nimport PlayedCard from './PlayedCard';\n\nconst Table = styled.div`\n    width: 60vw;\n    height: 60vw;\n    border-radius: 10px;\n    position: relative;\n    transition: all .3s;\n    border: 1px solid ${({theme}) => theme.border_color };\n    background-color: ${({theme}) => theme.bg };\n`\n\n\nconst themeData = {\n    light: { \n        bg: '#f9f9f9',\n        border_color: 'transparent'\n    },\n    dark: { \n        bg: color.$dark_dim_bg_color,\n        border_color: color.$dark_dim_border_color\n    },\n}\n\nconst CardTable = () => {\n    const [theme] = useRecoilState(themeState);\n    return (\n        <Table theme={themeData[theme]} className=\"card_table\">\n            <PlayedCard />\n            <Nameplate />\n        </Table>\n    )\n}\n\nexport default CardTable","import React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames'\nimport { color } from 'style/theme';\nimport { ThemeTypes } from 'types/theme';\n\nconst Box = styled.div`\n    display: flex;\n    border-radius: 5px;\n    overflow: hidden;\n    transition: .3s all;\n    border: ${({ theme }) => theme.border}; \n\n    .title {\n        flex-grow: 0;\n        text-align: center;\n        padding: 5px 10px;\n        color: white;\n        font-size: 14px;\n        letter-spacing: 2px;\n        writing-mode: vertical-lr;\n        transition: .3s all;\n        color: ${({ theme }) => theme.fc};\n        border-right: ${({ theme }) => theme.border};\n        background-color: ${({ theme }) => theme.title_bg};\n    }\n\n    .content {\n        flex-grow: 1;\n        padding: 8px;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        transition: .3s all;\n        background-color: ${({ theme }) => theme.bg};\n    }\n`\n\nconst themeData = {\n    light: {\n        bg: 'white',\n        fc: 'white',\n        title_bg: color.$orange_color,\n        border: '1px solid transparent',\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        fc: color.$light_pink_color,\n        title_bg: color.$dark_dim_bg_color,\n        border: '1px solid' + color.$dark_dim_border_color,\n    },\n}\n\ninterface InfoBoxProperty {\n    theme: ThemeTypes;\n    title: string;\n    children: React.ReactNode;\n    className: string;\n}\n\nconst InfoBox = (props: InfoBoxProperty) => {\n    const { theme, title, children, className } = props;\n    return(\n    <Box theme={themeData[theme]} className={classnames(\"info_box\", className)}>\n        <span className=\"title\">{title}</span>\n        <span className=\"content\">{children}</span>\n    </Box>\n)}\n\nexport default InfoBox;","import React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { trumpState } from 'store/game';\nimport { teamShouldWinState } from 'store/bind';\nimport { teamScoresState } from 'store/score';\nimport { color } from 'style/theme';\nimport { suitColor, suitInPoker } from 'util/suit'\nimport InfoBox from './InfoBox';\nimport { TeamTypes } from 'types/player';\n\nconst Board = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 60vw;\n    margin-top: 40px;\n\n    & > div {\n        &:first-child {\n            flex: 1 0 auto;\n        }\n        &:last-child {\n            flex: 1.2 0 auto;\n            margin-left: 15px;\n        }\n    }\n`\n\nconst Point = styled.div`\n        &.team1 {\n            .team__name {\n                transition: .3s all;\n                background-color: ${({ theme }) => theme.team1color};\n            }\n        }\n\n        &.team2 {\n            &::before {\n            content: \"\";\n            display: block;\n            width: 100%;\n            border-top: 1px solid ${({ theme }) => theme.border};\n            margin: 5px 0;\n            }\n            .team__name {\n                transition: .3s all;\n                background-color: ${({ theme }) => theme.team2color};\n            }\n        }\n\n        .team__name {\n        display: inline-block;\n        width: 10px;\n        height: 10px;\n        margin-right: 10px;\n        border-radius: 100%;\n        }\n\n        .team__tricks {\n        letter-spacing: 1px;\n        .now_win {\n            font-size: 14px;\n            margin-right: 3px;\n            transition: .3s all;\n            color: ${({theme}) => theme.fc};\n        }\n        .should_win {\n            font-size: 12px;\n            color: #7e7e7e;\n        }\n    }\n`\n\ninterface SuitProperty {\n    suitColor: string;\n}\n\nconst Suit = styled.span<SuitProperty>`\n    font-size: 20px;\n    transition: .3s all;\n    color: ${({suitColor, theme}) => theme.suit[suitColor]};\n`\n\nconst themeData = {\n    light: {\n        border: color.$orange_color,\n        fc: color.$default_font_color,\n        suit: {\n            red: color.$red_suit_color,\n            black: color.$black_suit_color\n        },\n        team1color: color.$pink_color,\n        team2color: color.$brown_color\n    },\n    dark: {\n        border: color.$dark_dim_border_color,\n        fc: color.$light_pink_color,\n        suit: {\n            red: color.$dark_red_suit_color,\n            black: color.$light_pink_color,\n        },\n        team1color:color.$fluorescent_pink_color,\n        team2color: color.$fluorescent_yellow_color\n    },\n}\n\ninterface PointInfoProperty {\n    team: TeamTypes;\n}\nconst PointInfo = (props: PointInfoProperty) => {\n    const { team } = props;\n    const [theme] = useRecoilState(themeState);\n    const teamShouldWin = useRecoilValue(teamShouldWinState);\n    const teamScores = useRecoilValue(teamScoresState);\n    return (\n        <Point theme={themeData[theme]} className={classnames('team', team)}>\n            <span className=\"team__name\"></span>\n            <span className=\"team__tricks\">\n                <span className=\"now_win\">{teamScores[team]}</span>\n                <span className=\"should_win\">/{teamShouldWin[team]}</span>\n            </span>\n        </Point>\n    )\n}\n\nconst MainInfo = () => {\n    const [theme] = useRecoilState(themeState);\n    const trump = useRecoilValue(trumpState);\n    return (\n        <Board theme={themeData[theme]} className=\"main_info\">\n            <InfoBox\n                theme={theme}\n                title=\"王牌\"\n                className=\"trump\">\n                <Suit theme={themeData[theme]}\n                    className=\"suit\"\n                    suitColor={suitColor(trump?.suit)}\n                >{trump?.suit ? suitInPoker(trump?.suit) : ''}&#xFE0E;</Suit>\n            </InfoBox>\n            <InfoBox theme={theme} title=\"戰況\" className=\"team\">\n                <PointInfo team={TeamTypes.TeamOne} />\n                <PointInfo team={TeamTypes.TeamTwo} />\n            </InfoBox>\n        </Board>\n    )\n}\n\nexport default MainInfo;","import React from 'react';\nimport styled from 'styled-components';\nimport classnames from 'classnames';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { navState } from 'store/user';\nimport { color } from \"style/theme\";\n\ninterface TogglerProperty  {\n    border: string;\n}\n\nconst Toggler = styled.button<TogglerProperty>`\n        transform: translateX(-50%);\n        display: flex;\n        align-items: center;\n        width: 17vw;\n        height: 17vw;\n        padding: 0;\n        border-radius: 50%;\n        transition: 0.4s all;\n        border: 1px solid ${({ border }) => border};\n        background-color: ${({ color }) => color};\n`\n\ninterface SideNavProperty  {\n    height: string;\n}\n\nconst SideNav = styled.div<SideNavProperty>`\n    display: flex;\n    position: absolute;\n    left: 100%;\n    height: ${({ height }) => height};\n    transition: .3s all ease-in-out;\n\n    &.won_tricks {\n        bottom: 7vw;\n        width: 62vw;\n    }\n\n    &.settings {\n        bottom: 15vw;\n        width: 55vw;\n    }\n\n    &.isOpen {\n        transform: translateX(-100%);\n    }\n\n    &.hide {\n        transform: translateX(50%);\n    }\n\n    .content_box {\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        box-sizing: border-box;\n        padding: 8px 0;\n        margin-top: -15px;\n        border-bottom-left-radius: 6px;\n        border-top-left-radius: 6px;\n        overflow-y: scroll;\n        transition:  0.3s all;\n        color: ${({ theme }) => theme.fg};\n        border: 1px solid ${({ theme }) => theme.border};\n        border-right: none;\n        background-color: ${({ theme }) => theme.bg};\n        .scroll_box{\n            width: 100%;\n            height: 100%;\n            padding: 0 10px;\n            box-sizing: border-box;\n            overflow-y: scroll;\n        }\n\n        .title {\n            text-align: center;\n            font-size: 14px;\n            letter-spacing: 1px;\n            padding-bottom: 5px;\n            margin-bottom: 5px;\n            border-bottom: 1px solid ${({ color, theme }) => {\n        if (theme === 'light') {\n            return color\n        } else {\n            return theme.border\n        };\n    }\n    }\n        }\n    }\n`\n\nconst themeData = {\n    light: {\n        bg: 'white',\n        fg: color.$default_font_color,\n        border: 'transparent',\n    },\n    dark: {\n        bg: color.$dark_dim_bg_color,\n        fg: 'white',\n        border: color.$dark_border_color,\n    },\n}\n\ninterface SideInfoProperty  {\n    title: string;\n    type: string | null;\n    renderIcon: React.ReactNode;\n    content: React.ReactNode;\n    className: string;\n    color: string;\n    height: string;\n    border: string;\n}\n\nconst SideInfo = (props: SideInfoProperty) => {\n    const { title, type, renderIcon, content, className, color, height, border } = props;\n    const [nowNav, setNowNav] = useRecoilState(navState);\n    const [theme] = useRecoilState(themeState);\n\n    const handleToggle = () => {\n        if (type === nowNav) {\n            setNowNav(null);\n        } else {\n            setNowNav(type);\n        }\n    }\n\n    return (\n        <SideNav\n            theme={themeData[theme]}\n            height={height}\n            color={color}\n            className={classnames(\n                \"side_nav\",\n                className,\n                {\n                    \"isOpen\": type === nowNav,\n                    \"hide\": nowNav && type !== nowNav\n                })}>\n            <Toggler\n                border={border}\n                onClick={handleToggle}\n                color={color}\n                className=\"toggler\">\n                {renderIcon}\n            </Toggler>\n            <div className=\"content_box\">\n                <div className=\"scroll_box\">\n                    <p className=\"title\">{title}</p>\n                    {content}\n                </div>\n            </div>\n        </SideNav>\n    )\n}\n\nexport default SideInfo","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { modalState } from 'store/modal';\nimport { navState } from 'store/user';\nimport { color } from 'style/theme';\nimport Button from 'components/Global/Button';\nimport ThemeToggler from 'components/Global/ThemeToggler';\n\nconst Item = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-left: 2px;\n    padding: 6px 0;\n    \n    &:not(:last-child) {\n        transition: 0.3s border-bottom; \n        border-bottom: 1px solid ${({ theme }) => theme.b_bottom};\n    }\n\n    & > span {\n        font-size: 13px;\n        margin-left: 5px;\n        margin-right: 10px;\n    }\n`\n\nconst SettingButton = styled(Button)`\n    padding: 5px 8px;\n`\n\nconst themeData = {\n    light: { \n        b_bottom: color.$under_line_color,\n        exit_button: color.$orange_color,\n        mail_button: color.$green_color,\n    },\n    dark: { \n        b_bottom: color.$dark_dim_border_color,\n        exit_button: color.$fluorescent_orange_color,\n        mail_button: color.$fluorescent_green_color,\n    },\n}\n\nconst Content = () => {\n    const [theme] = useRecoilState(themeState);\n    const setModalType = useSetRecoilState(modalState);\n    const setNowNav = useSetRecoilState(navState);\n    return (\n    <>\n        <Item theme={themeData[theme]}>\n            <span>更換主題</span>\n            <ThemeToggler />\n        </Item>\n        <Item theme={themeData[theme]}>\n            <span>離開遊戲</span>\n            <SettingButton \n                onClick={()=>{\n                    setNowNav(null);\n                    setModalType('cofirm-leave')\n                }}\n                color={themeData[theme].exit_button}\n            >EXIT</SettingButton>\n        </Item>\n    </>\n)}\n\nexport default Content;","import React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\nimport SideInfo from 'components/GameRoom/SideInfo';\nimport Content from './Content';\nimport { NavigatorTypes } from 'types/navigator';\n\n\nconst Icon = styled.div`\n    position: relative;\n    margin-left: 8px;\n\n    .cross {\n        display: block;\n        width: 13px;\n        position: absolute;\n        transition: 0.4s all, 0.3s border-top;\n        transform-origin: center;\n        border-top: 1px solid ${({ theme }) => theme.line};\n\n        &.vertical {\n            transform: rotate(90deg);\n        }\n    }\n\n    &.isOpen {\n        .cross {\n                &.vertical {\n                    transform: rotate(45deg);\n                }\n\n                &.horizental {\n                    transform: rotate(-45deg);\n                }\n            }\n    }\n`\n\nconst themeData = {\n    light: { \n        button_bg: color.$green_color,\n        line: 'white',\n        border: 'transparent'\n    },\n    dark: { \n        button_bg: color.$dark_dim_bg_color,\n        line: color.$dark_border_color,\n        border: color.$dark_border_color,\n    },\n}\n\ninterface PlusIconProperty  {\n    isOpen: boolean;\n}\n\nconst PlusIcon = (props: PlusIconProperty) => {\n    const { isOpen } = props;\n    const [theme] = useRecoilState(themeState);\n    return(\n    <Icon theme={themeData[theme]} className={classnames(\"plus_icon\",{\"isOpen\": isOpen})}>\n        <span className=\"cross vertical\"></span>\n        <span className=\"cross horizental\"></span>\n    </Icon>\n)}\n\ninterface SettingsProperty {\n    active: boolean;\n}\nconst Settings = (props: SettingsProperty) => {\n    const { active } = props;\n    const [theme] = useRecoilState(themeState);\n    return (\n        <SideInfo \n            title=\"設定\"\n            type={NavigatorTypes.Settings}\n            height=\"40vw\"\n            border={themeData[theme].border}\n            color={themeData[theme].button_bg}\n            renderIcon={<PlusIcon isOpen={active}/>}\n            content={<Content/>}\n            className=\"settings\"\n        />\n    )\n}\n\nexport default Settings;","import React from 'react';\nimport classnames from 'classnames';\nimport styled from 'styled-components';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\n\nconst StyledCardIcon = styled.div`\n    display: flex;\n\n    .card {\n        display: block;\n        width: 9px;\n        height: 13px;\n        border-radius: 2px;\n        transition: 0.4s all;\n        border: 1px solid ${({ theme }) => theme.line};\n        background-color: ${({ theme }) => theme.bg};\n\n        &:nth-child(1) {\n            transform: translate(8px, 0px);\n            z-index: 12;\n        }\n    }\n\n    &.isOpen {\n        .card{\n            &:nth-child(1) {\n                    transform: rotate(-15deg) translate(7px, 1px);\n            }\n\n            &:nth-child(2) {\n                transform: rotate(8deg) translate(1px, -2px);\n            }\n        }\n    }\n`\n\nconst themeData = {\n    light: { \n        bg: color.$orange_color,\n        line: 'white',\n    },\n    dark: { \n        bg: color.$dark_bg_color,\n        line: color.$dark_border_color\n    },\n}\n\ninterface CardIconProperty  {\n    isOpen: boolean;\n}\nconst CardIcon = (props: CardIconProperty) => {\n    const { isOpen } = props;\n    const [theme] = useRecoilState(themeState);\n    return (\n    <StyledCardIcon \n        theme={themeData[theme]}\n        className={classnames(\"card_icon\",{\"isOpen\": isOpen})}>\n        <span className=\"card\"></span>\n        <span className=\"card\"></span>\n    </StyledCardIcon>\n)}\n\nexport default CardIcon;","import React from 'react';\nimport styled from 'styled-components';\nimport { useRecoilValue } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { userWinTricksState } from 'store/winTricks';\nimport { color } from 'style/theme';\nimport Card from 'components/GameRoom/Card';\n\nconst List = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-left: 2px;\n\n    .trick {\n        display: flex;\n        justify-content: space-between;\n        padding: 6px 0;\n        & + .trick {\n            transition: 0.3s all;\n            border-top: 1px solid ${({ theme }) => theme.b_bottom};\n        }\n\n        .card_in_won_trick {\n            width: 13vw;\n            height: 16vw;\n        }\n    }\n`\n\nconst Empty = styled.p`\n    text-align: center;\n    font-size: 14px;\n    margin-top: 5px;\n    color: ${color.$unable_color};\n`\n\nconst themeData = {\n    light: { \n        b_bottom: color.$under_line_color,\n    },\n    dark: { \n        b_bottom: color.$dark_dim_border_color,\n    },\n}\n\nconst Content = () => {\n    const theme = useRecoilValue(themeState);\n    const userWinTricks = useRecoilValue(userWinTricksState);\n    return (\n        <>\n        {!userWinTricks.length\n        ?<Empty>加把勁！隊友需要你！</Empty>\n        :<List \n            theme={themeData[theme]}\n            className=\"won_trick_list\">\n            {userWinTricks.map((trick, index) => (\n            <div \n                key={'trick'+index} \n                className=\"trick\">\n                {trick.map(card =>\n                (<Card\n                    className=\"card_in_won_trick\"\n                    key={card.number+card.suit}\n                    number={card.number}\n                    suit={card.suit}\n                    hasDetail\n                />))}\n            </div>))}\n        </List>}\n        </>\n    )\n}\n\nexport default Content;","import React from 'react';\nimport { useRecoilState } from 'recoil';\nimport { themeState } from 'store/theme';\nimport { color } from 'style/theme';\nimport SideInfo from 'components/GameRoom/SideInfo';\nimport Icon from './Icon';\nimport Content from './Content';\nimport { NavigatorTypes } from 'types/navigator';\n\nconst themeData = {\n    light: { \n        button_bg: color.$orange_color,\n        border: 'transparent'\n    },\n    dark: { \n        button_bg: color.$dark_dim_bg_color,\n        border: color.$dark_border_color,\n    },\n}\n\ninterface WonTricksProperty {\n    active: boolean;\n}\n\nconst WonTricks = (props: WonTricksProperty) => {\n    const { active } = props;\n    const [theme] = useRecoilState(themeState);\n    return(\n        <SideInfo \n            title=\"你贏的墩們\"\n            type={NavigatorTypes.WonTricks}\n            height=\"70vw\"\n            border={themeData[theme].border}\n            color={themeData[theme].button_bg}\n            renderIcon={<Icon isOpen={active}/>}\n            content={<Content/>}\n            className=\"won_tricks\"\n        />\n    )}\n\nexport default WonTricks","import React from 'react';\nimport styled from 'styled-components';\nimport Settings from 'components/GameRoom/Settings';\nimport WonTricks from 'components/GameRoom/WonTricks';\nimport { color } from 'style/theme';\nimport { navState } from 'store/user';\nimport { useRecoilValue } from 'recoil';\nimport { NavigatorTypes } from 'types/navigator';\n\ninterface BackgroundProperty  {\n    nowNav: string | null;\n}\n\nconst Background = styled.nav<BackgroundProperty>`\n    z-index: ${props => props.nowNav ? 30 : 0};\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-color: ${props => props.nowNav\n        ? color.$shadow\n        : 'transparent'\n    };\n    transition: .4s all ease-in-out;\n`\n\nconst Navbar = () => {\n    const nowNav = useRecoilValue(navState);\n    return (\n        <Background\n            nowNav={nowNav}\n            className=\"side_navbar\">\n            <WonTricks active={nowNav === NavigatorTypes.WonTricks} />\n            <Settings active={nowNav === NavigatorTypes.Settings} />\n        </Background>\n    )\n};\n\nexport default Navbar;","import React, { useEffect } from 'react';\nimport { useRecoilValue, useSetRecoilState, useRecoilState } from 'recoil';\nimport db from \"database\";\nimport styled from 'styled-components';\nimport { color } from \"style/theme\";\nimport { generateNewDeck } from 'util/deck';\nimport useInitData from \"util/hook/useInitData\";\nimport { userIndexState, userRoomState, userIDState } from 'store/user';\nimport { modalState } from 'store/modal';\nimport { userDeckState, otherPlayerDeckState } from 'store/deck';\nimport { themeState } from 'store/theme';\nimport { relationWithUser } from 'store/players';\nimport { currentPlayerName, thisRoundSuitState } from 'store/game';\nimport ModalRoot from 'components/GameRoom/Modal/ModalRoot';\nimport Cards from 'components/GameRoom/Cards';\nimport CardTable from 'components/GameRoom/CardTable';\nimport MainInfo from 'components/GameRoom/MainInfo';\nimport Navbar from 'components/GameRoom/Navbar';\n\nconst Room = styled.div`\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n\n        transition: .3s background-color;\n        background-color: ${({ theme }) => theme.bg};\n`\n\nconst themeData = {\n    light: { bg: '#f3e9e9' },\n    dark: { bg: color.$dark_bg_color },\n}\n\nconst GameRoom = () => {\n    const [theme] = useRecoilState(themeState);\n    const [{ initGameRoomData }] = useInitData();\n    const userIndex = useRecoilValue(userIndexState);\n    const userID = useRecoilValue(userIDState);\n    const setUserDeck = useSetRecoilState(userDeckState);\n    const setOtherPlayerDeck = useSetRecoilState(otherPlayerDeckState);\n    const { nextPlayer, teammate, previousPlayer } = useRecoilValue(relationWithUser);\n    const setModalType = useSetRecoilState(modalState);\n    const setNowPlayerState = useSetRecoilState(currentPlayerName);\n    const setThisRoundSuit = useSetRecoilState(thisRoundSuitState);\n    const roomName = useRecoilValue(userRoomState);\n    const roomRef = db.database().ref(`/${roomName}`);\n\n    useEffect(() => {\n        initGameData();\n        listenOnCurrentPlayer();\n        listenOnThisRoundSuit();\n        listenOnChangeRouteEvent();\n        detectUserDisConnect();\n\n        return () => {\n            removeListeners();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const initGameData = async () => {\n        const gameInfoRef = roomRef.child('gameInfo');\n        await gameInfoRef.remove()\n        initGameRoomData();\n        await dealDeck();\n    }\n\n    const dealDeck = async () => {\n        const gameInfoRef = roomRef.child('gameInfo');\n\n        // if (userIndex === 0) {\n            const newDeck = generateNewDeck();\n            await gameInfoRef.update({ deck: newDeck });\n        // }\n\n        gameInfoRef.child('deck').on(\"value\", (data) => {\n            const deck = data.val();\n            setOtherPlayerDeck({\n                [nextPlayer]: 13,\n                [teammate]: 13,\n                [previousPlayer]: 13,\n            })\n            if (deck) {\n                setUserDeck(deck[userIndex]);\n            }\n        })\n    };\n\n    const listenOnCurrentPlayer = () => {\n        const currentPlayerRef = roomRef.child('currentPlayer');\n        currentPlayerRef.on(\"value\", (data) => {\n            const nowPlayerID = data.val();\n            setNowPlayerState(nowPlayerID);\n        })\n    };\n\n    const listenOnThisRoundSuit = () => {\n        const roundSuitRef = roomRef.child('gameInfo').child('thisRoundSuit');\n        roundSuitRef.on(\"value\", (data) => {\n            const roundSuit = data.val();\n            setThisRoundSuit(roundSuit)\n        })\n    };\n\n    const listenOnChangeRouteEvent = () => {\n        const changeMateRef = roomRef.child('changeMate');\n        const leaveRef = roomRef.child('someoneLeaveGame');\n        const restartRef = roomRef.child('restart');\n        const disconnectedRef = roomRef.child('someoneDisconnected')\n\n        changeMateRef.on(\"value\", (data) => {\n            const isTrigger = data.val();\n            if (isTrigger) {\n                setModalType('countdown-change-mate')\n            }\n        });\n        leaveRef.on(\"value\", (data) => {\n            const isTrigger = data.val();\n            if (isTrigger) {\n                setModalType('countdown-leave')\n            }\n        });\n        restartRef.on(\"value\", (data) => {\n            const isTrigger = data.val();\n            if (isTrigger) {\n                setModalType('countdown-restart')\n            }\n        });\n\n        disconnectedRef.on(\"value\", async (data) => {\n            const isTrigger = data.val();\n            if (isTrigger) {\n                setModalType('countdown-destroy');\n            }\n        });\n    }\n\n    const detectUserDisConnect = () => {\n        roomRef.onDisconnect().update({ someoneLeaveGame: true });\n        roomRef\n            .child('playersInfo')\n            .child(userID)\n            .onDisconnect()\n            .remove();\n    };\n\n    const removeListeners = () => {\n        const gameInfoRef = roomRef.child('gameInfo');\n        const deckInfo = gameInfoRef.child('deck');\n        const currentPlayerRef = roomRef.child('currentPlayer');\n        const roundSuitRef = roomRef.child('gameInfo').child('thisRoundSuit');\n        const changeMateRef = roomRef.child('changeMate');\n        const leaveRef = roomRef.child('someoneLeaveGame');\n        const restartRef = roomRef.child('restart');\n        const disconnectedRef = roomRef.child('someoneDisconnected')\n        currentPlayerRef.off();\n        deckInfo.off();\n        roundSuitRef.off();\n        changeMateRef.off();\n        leaveRef.off();\n        restartRef.off();\n        gameInfoRef.remove();\n        disconnectedRef.remove();\n        roomRef.onDisconnect().cancel();\n        roomRef\n            .child('playersInfo')\n            .child(userID)\n            .onDisconnect()\n            .cancel();\n    }\n\n    return (\n        <Room theme={themeData[theme]} className=\"game_room\">\n            <Cards />\n            <CardTable />\n            <MainInfo />\n            <ModalRoot initGameData={initGameData} />\n            <Navbar />\n        </Room>)\n}\n\nexport default GameRoom;","import Home from './views/Home';\nimport WaitRoom from './views/WaitRoom';\nimport GameRoom from './views/GameRoom';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  // Redirect\n} from \"react-router-dom\";\n\nconst App = () => (\n    <>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/:roomName/waiting_room/:userID\" component={WaitRoom} />\n        <Route path=\"/:roomName/game_room/:userID\" component={GameRoom} />\n      </Switch>\n    </Router>\n    </>\n)\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { GlobalStyle } from './style/globalStyle'\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <RecoilRoot>\n        <App />\n        <GlobalStyle />\n    </RecoilRoot>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}